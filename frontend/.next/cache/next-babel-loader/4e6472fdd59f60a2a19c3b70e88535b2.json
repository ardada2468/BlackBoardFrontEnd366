{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _ from 'lodash';\nimport React from 'react';\nimport { Search, Grid, Header, Segment } from 'semantic-ui-react';\nimport Seo from \"../components/seo\";\nimport { fetchAPI } from \"../lib/api\";\nimport getStaticProps from \"../pages/article/[slug]\"; // const data = ({ articles, categories, homepage }) => {\n// }\n// export async function getStaticProps() {\n//     // Run API calls in parallel\n//     const [articles, categories, homepage] = await Promise.all([\n//       fetchAPI(\"/articles?status=published\"),\n//       fetchAPI(\"/categories\"),\n//       fetchAPI(\"/homepage\"),\n//     ]);\n//     return {\n//       props: { articles, categories, homepage },\n//       revalidate: 1,\n//     };\n//   }\n//   const source = _.times(5, ({ articles, categories, homepage }) => ({\n//         title: articles.title,\n//         discription: articles.description,\n//         image: getStrapiMedia\n// }))\n// getStaticProps()\n//   const source = _.times(5, (articles, categories) => ({\n//         title: articles.title,\n//         discription: articles.description,\n// }))\n\nconst initialState = {\n  loading: false,\n  results: [],\n  value: ''\n};\n\nfunction exampleReducer(state, action) {\n  switch (action.type) {\n    case 'CLEAN_QUERY':\n      return initialState;\n\n    case 'START_SEARCH':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        value: action.query\n      });\n\n    case 'FINISH_SEARCH':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        results: action.results\n      });\n\n    case 'UPDATE_SELECTION':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: action.selection\n      });\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction SearchExampleStandard() {\n  const [state, dispatch] = React.useReducer(exampleReducer, initialState);\n  const {\n    loading,\n    results,\n    value\n  } = state;\n  const timeoutRef = React.useRef();\n  const handleSearchChange = React.useCallback((e, data) => {\n    clearTimeout(timeoutRef.current);\n    dispatch({\n      type: 'START_SEARCH',\n      query: data.value\n    });\n    timeoutRef.current = setTimeout(() => {\n      if (data.value.length === 0) {\n        dispatch({\n          type: 'CLEAN_QUERY'\n        });\n        return;\n      }\n\n      const re = new RegExp(_.escapeRegExp(data.value), 'i');\n\n      const isMatch = result => re.test(result.title);\n\n      dispatch({\n        type: 'FINISH_SEARCH',\n        results: _.filter(source, isMatch)\n      });\n    }, 300);\n  }, []);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timeoutRef.current);\n    };\n  }, []);\n  return __jsx(Grid, null, __jsx(Grid.Column, {\n    width: 6\n  }, __jsx(Search, {\n    loading: loading,\n    onResultSelect: (e, data) => dispatch({\n      type: 'UPDATE_SELECTION',\n      selection: data.result.title\n    }),\n    onSearchChange: handleSearchChange,\n    results: results,\n    value: value\n  })), __jsx(Grid.Column, {\n    width: 10\n  }, __jsx(Segment, null, __jsx(Header, null, \"State\"), __jsx(\"pre\", {\n    style: {\n      overflowX: 'auto'\n    }\n  }, JSON.stringify({\n    loading,\n    results,\n    value\n  }, null, 2)), __jsx(Header, null, \"Options\"), __jsx(\"pre\", {\n    style: {\n      overflowX: 'auto'\n    }\n  }, JSON.stringify(source, null, 2)))));\n}\n\nexport default SearchExampleStandard;","map":null,"metadata":{},"sourceType":"module"}