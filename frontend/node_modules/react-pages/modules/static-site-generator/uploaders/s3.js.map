{"version":3,"sources":["../../../source/static-site-generator/uploaders/s3.js"],"names":["s3","S3Uploader","accessKeyId","secretAccessKey","region","bucket","ACL","upload","directory","started","progress","params","localDir","deleteRemoved","s3Params","Bucket","s3Client","createClient","maxAsyncS3","s3RetryCount","s3RetryDelay","multipartUploadThreshold","multipartUploadSize","s3Options","console","log","uploader","uploadDir","initialized","finished","on","progressMd5Total","progressSoFar","progressMd5Amount","Promise","resolve","reject"],"mappings":"AAAA,OAAOA,EAAP,MAAe,WAAf;AAEA,eAAe,SAASC,UAAT,OACf;AAAA,MADqCC,WACrC,QADqCA,WACrC;AAAA,MADkDC,eAClD,QADkDA,eAClD;AAAA,MADmEC,MACnE,QADmEA,MACnE;AAAA,MAD2EC,MAC3E,QAD2EA,MAC3E;AAAA,MADmFC,GACnF,QADmFA,GACnF;AACC,SAAO,SAASC,MAAT,CAAgBC,SAAhB,SACP;AAAA,QADoCC,OACpC,SADoCA,OACpC;AAAA,QAD6CC,QAC7C,SAD6CA,QAC7C;AACC,QAAMC,MAAM,GACZ;AACCC,MAAAA,QAAQ,EAAEJ,SADX;AAECK,MAAAA,aAAa,EAAE,IAFhB;AAEsB;AACrBC,MAAAA,QAAQ,EACR;AACCR,QAAAA,GAAG,EAAEA,GADN;AAECS,QAAAA,MAAM,EAAEV;AAFT;AAJD,KADA;AAWA,QAAMW,QAAQ,GAAGhB,EAAE,CAACiB,YAAH,CAChB;AACAC,MAAAA,UAAU,EAAE,EADZ;AACoB;AACpBC,MAAAA,YAAY,EAAE,CAFd;AAEoB;AACpBC,MAAAA,YAAY,EAAE,IAHd;AAGoB;AACpBC,MAAAA,wBAAwB,EAAE,QAJ1B;AAIoC;AACpCC,MAAAA,mBAAmB,EAAE,QALrB;AAK+B;AAC/BC,MAAAA,SAAS,EACT;AACCrB,QAAAA,WAAW,EAAXA,WADD;AAECC,QAAAA,eAAe,EAAfA,eAFD;AAGCC,QAAAA,MAAM,EAANA;AAHD;AAPA,KADgB,CAAjB;AAeAoB,IAAAA,OAAO,CAACC,GAAR;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,0EAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR;AAEA,QAAMC,QAAQ,GAAGV,QAAQ,CAACW,SAAT,CAAmBhB,MAAnB,CAAjB;AAEA,QAAIiB,WAAW,GAAG,KAAlB;AACA,QAAIC,QAAQ,GAAG,KAAf;AAEAH,IAAAA,QAAQ,CAACI,EAAT,CAAY,UAAZ,EAAwB,YACxB;AACC,UAAI,CAACF,WAAD,IAAgBF,QAAQ,CAACK,gBAA7B,EACA;AACCtB,QAAAA,OAAO,CAACiB,QAAQ,CAACK,gBAAV,CAAP;AACAH,QAAAA,WAAW,GAAG,IAAd;AACA;;AACD,UAAIA,WAAJ,EACA;AACC,YAAMI,aAAa,GAAGN,QAAQ,CAACO,iBAAT,GAA6BP,QAAQ,CAACK,gBAA5D,CADD,CAGC;;AACA,YAAIC,aAAa,KAAK,CAAtB,EACA;AACC,cAAI,CAACH,QAAL,EACA;AACCA,YAAAA,QAAQ,GAAG,IAAX;AACAnB,YAAAA,QAAQ,CAAC,CAAD,CAAR;AACA;AACD,SAPD,MAQKA,QAAQ,CAACsB,aAAD,CAAR;AACL;AACD,KAtBD;AAwBA,WAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EACnB;AACCV,MAAAA,QAAQ,CAACI,EAAT,CAAY,KAAZ,EAAmBK,OAAnB;AACAT,MAAAA,QAAQ,CAACI,EAAT,CAAY,OAAZ,EAAqBM,MAArB;AACA,KAJM,CAAP;AAKA,GAlED;AAmEA","sourcesContent":["import s3 from '@auth0/s3'\r\n\r\nexport default function S3Uploader({ accessKeyId, secretAccessKey, region, bucket, ACL })\r\n{\r\n\treturn function upload(directory, { started, progress })\r\n\t{\r\n\t\tconst params =\r\n\t\t{\r\n\t\t\tlocalDir: directory,\r\n\t\t\tdeleteRemoved: true, // default false, whether to remove s3 objects\r\n\t\t\ts3Params:\r\n\t\t\t{\r\n\t\t\t\tACL: ACL,\r\n\t\t\t\tBucket: bucket\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst s3Client = s3.createClient\r\n\t\t({\r\n\t\t\tmaxAsyncS3: 20,     // this is the default\r\n\t\t\ts3RetryCount: 3,    // this is the default\r\n\t\t\ts3RetryDelay: 1000, // this is the default\r\n\t\t\tmultipartUploadThreshold: 20971520, // this is the default (20 MB)\r\n\t\t\tmultipartUploadSize: 15728640, // this is the default (15 MB)\r\n\t\t\ts3Options:\r\n\t\t\t{\r\n\t\t\t\taccessKeyId,\r\n\t\t\t\tsecretAccessKey,\r\n\t\t\t\tregion\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tconsole.log()\r\n\t\tconsole.log('(the S3 upload progress bar seems to be buggy, just wait until it exits)')\r\n\t\tconsole.log()\r\n\r\n\t\tconst uploader = s3Client.uploadDir(params)\r\n\r\n\t\tlet initialized = false\r\n\t\tlet finished = false\r\n\r\n\t\tuploader.on('progress', () =>\r\n\t\t{\r\n\t\t\tif (!initialized && uploader.progressMd5Total)\r\n\t\t\t{\r\n\t\t\t\tstarted(uploader.progressMd5Total)\r\n\t\t\t\tinitialized = true\r\n\t\t\t}\r\n\t\t\tif (initialized)\r\n\t\t\t{\r\n\t\t\t\tconst progressSoFar = uploader.progressMd5Amount / uploader.progressMd5Total\r\n\r\n\t\t\t\t// `s3` spams for a lot of `progress` with `1`.\r\n\t\t\t\tif (progressSoFar === 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!finished)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfinished = true\r\n\t\t\t\t\t\tprogress(1)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse progress(progressSoFar)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn new Promise((resolve, reject) =>\r\n\t\t{\r\n\t\t\tuploader.on('end', resolve)\r\n\t\t\tuploader.on('error', reject)\r\n\t\t})\r\n\t}\r\n}"],"file":"s3.js"}