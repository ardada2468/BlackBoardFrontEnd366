import _regeneratorRuntime from "@babel/runtime/regenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import path from 'path';
import fs from 'fs-extra';
import ProgressBar from 'progress';
import download from './download'; // Snapshots all pages (URLs).

export default function snapshotWebsite(_x) {
  return _snapshotWebsite.apply(this, arguments);
} // Snapshots all pages (URLs).

function _snapshotWebsite() {
  _snapshotWebsite = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee(options) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", snapshot(_objectSpread({}, options, {
              transformContent: function transformContent(content) {
                if (options.transformContent) {
                  content = options.transformContent(content);
                }

                if (options.reloadData) {
                  content = addReloadDataFlag(content);
                }

                return content;
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _snapshotWebsite.apply(this, arguments);
}

export function snapshot(_x2) {
  return _snapshot.apply(this, arguments);
}

function _snapshot() {
  _snapshot = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee2(_ref) {
    var host, port, pages, outputPath, transformContent, snapshotProgress;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            host = _ref.host, port = _ref.port, pages = _ref.pages, outputPath = _ref.outputPath, transformContent = _ref.transformContent;

            // Could be `null`, not just `undefined`.
            if (!pages) {
              pages = [];
            } // Add the "base" page which is an empty page
            // which will be rendered in user's browser on client side.
            // This should be the "fallback" page.


            pages.unshift('/react-pages-base'); // The progress meter for the website snapshotting process.

            snapshotProgress = new ProgressBar(' Snapshotting [:bar] :total :percent :etas', {
              complete: '=',
              incomplete: ' ',
              width: 50,
              total: pages.length
            }); // Start the website snapshotting process

            _context2.next = 6;
            return snapshotPages(host, port, pages, outputPath, transformContent, function () {
              return snapshotProgress.tick();
            });

          case 6:
            fs.moveSync(path.join(outputPath, 'react-pages-base/index.html'), path.join(outputPath, 'base.html'));
            fs.removeSync(path.join(outputPath, 'react-pages-base'));

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _snapshot.apply(this, arguments);
}

function snapshotPages(_x3, _x4, _x5, _x6, _x7, _x8) {
  return _snapshotPages.apply(this, arguments);
}

function _snapshotPages() {
  _snapshotPages = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee3(host, port, pages, outputPath, transformContent, tick) {
    var _iterator, _isArray, _i, _ref2, page;

    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return fs.remove(outputPath);

          case 2:
            _iterator = pages, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();

          case 3:
            if (!_isArray) {
              _context3.next = 9;
              break;
            }

            if (!(_i >= _iterator.length)) {
              _context3.next = 6;
              break;
            }

            return _context3.abrupt("break", 19);

          case 6:
            _ref2 = _iterator[_i++];
            _context3.next = 13;
            break;

          case 9:
            _i = _iterator.next();

            if (!_i.done) {
              _context3.next = 12;
              break;
            }

            return _context3.abrupt("break", 19);

          case 12:
            _ref2 = _i.value;

          case 13:
            page = _ref2;
            _context3.next = 16;
            return snapshotPage(host, port, page, outputPath, transformContent);

          case 16:
            tick();

          case 17:
            _context3.next = 3;
            break;

          case 19:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _snapshotPages.apply(this, arguments);
}

function snapshotPage(_x9, _x10, _x11, _x12, _x13) {
  return _snapshotPage.apply(this, arguments);
}

function _snapshotPage() {
  _snapshotPage = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee4(host, port, page, outputPath, transformContent) {
    var url, targetStatusCode, _url, _ref3, status, content;

    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            url = page;
            targetStatusCode = 200;

            if (typeof page !== 'string' && page.status) {
              url = page.url;
              targetStatusCode = page.status;
            }

            _url = "http://".concat(host, ":").concat(port).concat(url);
            _context4.next = 6;
            return download(_url);

          case 6:
            _ref3 = _context4.sent;
            status = _ref3.status;
            content = _ref3.content;

            if (!(status !== targetStatusCode)) {
              _context4.next = 11;
              break;
            }

            throw new Error("Expected ".concat(targetStatusCode, " HTTP status code for \"").concat(_url, "\". Got ").concat(status, "."));

          case 11:
            fs.outputFileSync(path.join(outputPath, url, '/index.html'), transformContent ? transformContent(content) : content);

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _snapshotPage.apply(this, arguments);
}

function addReloadDataFlag(content) {
  var headEndsAt = content.indexOf('</head>');

  if (headEndsAt < 0) {
    throw new Error('</head> not found');
  }

  return content.slice(0, headEndsAt) + '<script> window._react_pages_reload_data = true </script>' + content.slice(headEndsAt);
}
//# sourceMappingURL=snapshot.js.map