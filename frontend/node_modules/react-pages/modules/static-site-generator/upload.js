import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import ProgressBar from 'progress'; // const green = '\u001b[42m \u001b[0m'

export default function upload_website(_x, _x2) {
  return _upload_website.apply(this, arguments);
}

function _upload_website() {
  _upload_website = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee(filesPath, upload) {
    var progressBar;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return upload(filesPath, {
              started: function started(total) {
                progressBar = new ProgressBar('  Uploading [:bar] :percent :etas', {
                  // complete : green,
                  complete: '=',
                  incomplete: ' ',
                  width: 50,
                  total: 100
                });
              },
              progress: function progress(value) {
                progressBar.update(value);
              }
            });

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _upload_website.apply(this, arguments);
}
//# sourceMappingURL=upload.js.map