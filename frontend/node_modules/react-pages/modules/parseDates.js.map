{"version":3,"sources":["../source/parseDates.js"],"names":["isObject","hours","minutes","midnight_weird","seconds","milliseconds","time","timezone_hours","timezone_minutes","timezone","year","month","day","ISO_date_regexp","ISO_date_matcher","RegExp","parseDates","object","test","Date","Array","i","length","Object","keys","key"],"mappings":"AAAA,SAASA,QAAT,QAAyB,WAAzB,C,CAEA;AACA;;AAEA,IAAMC,KAAK,GAAG,kBAAd;AACA,IAAMC,OAAO,GAAG,UAAhB;AACA,IAAMC,cAAc,GAAG,SAAvB;AACA,IAAMC,OAAO,GAAG,UAAhB;AACA,IAAMC,YAAY,GAAG,MAArB;AACA,IAAMC,IAAI,cAAOL,KAAP,gBAAkBC,OAAlB,cAA6BC,cAA7B,iBAAkDC,OAAlD,oBAAmEC,YAAnE,OAAV;AAEA,IAAME,cAAc,qBAApB;AACA,IAAMC,gBAAgB,aAAtB;AACA,IAAMC,QAAQ,2BAAoBF,cAApB,kBAA0CC,gBAA1C,QAAd;AAEA,IAAME,IAAI,GAAG,QAAb;AACA,IAAMC,KAAK,GAAG,iBAAd;AACA,IAAMC,GAAG,GAAG,wBAAZ;AAEA,OAAO,IAAMC,eAAe,aAAMH,IAAN,cAAcC,KAAd,cAAuBC,GAAvB,cAA8BN,IAA9B,SAAqCG,QAArC,CAArB;AACP,OAAO,IAAMK,gBAAgB,GAAG,IAAIC,MAAJ,CAAW,MAAMF,eAAN,GAAwB,GAAnC,CAAzB,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,eAAe,SAASG,UAAT,CAAoBC,MAApB,EACf;AACC;AACA,MAAI,OAAOA,MAAP,KAAkB,QAAlB,IAA8BH,gBAAgB,CAACI,IAAjB,CAAsBD,MAAtB,CAAlC,EACA;AACC,WAAO,IAAIE,IAAJ,CAASF,MAAT,CAAP;AACA,GAHD,CAIA;AACA;AALA,OAMK,IAAIA,MAAM,YAAYG,KAAtB,EACL;AACC,UAAIC,CAAC,GAAG,CAAR;;AACA,aAAOA,CAAC,GAAGJ,MAAM,CAACK,MAAlB,EACA;AACCL,QAAAA,MAAM,CAACI,CAAD,CAAN,GAAYL,UAAU,CAACC,MAAM,CAACI,CAAD,CAAP,CAAtB;AACAA,QAAAA,CAAC;AACD;AACD,KARI,CASL;AACA;AACA;AAXK,SAYA,IAAIrB,QAAQ,CAACiB,MAAD,CAAZ,EACL;AACC,wCAAkBM,MAAM,CAACC,IAAP,CAAYP,MAAZ,CAAlB,kCACA;AADK,cAAMQ,GAAG,mBAAT;AAEJ;AACAR,UAAAA,MAAM,CAACQ,GAAD,CAAN,GAAcT,UAAU,CAACC,MAAM,CAACQ,GAAD,CAAP,CAAxB;AACA;AACD,OA3BF,CA6BC;;;AACA,SAAOR,MAAP;AACA","sourcesContent":["import { isObject } from './helpers'\r\n\r\n// ISO 8601 date regular expression\r\n// Adapted from: http://stackoverflow.com/a/14322189/970769\r\n\r\nconst hours = '([01]\\\\d|2[0-3])'\r\nconst minutes = '[0-5]\\\\d'\r\nconst midnight_weird = '24\\\\:00'\r\nconst seconds = '[0-5]\\\\d'\r\nconst milliseconds = '\\\\d+'\r\nconst time = `(${hours}\\\\:${minutes}|${midnight_weird})\\\\:${seconds}([\\\\.,]${milliseconds})?`\r\n\r\nconst timezone_hours = `([01]\\\\d|2[0-3])`\r\nconst timezone_minutes = `[0-5]\\\\d`\r\nconst timezone = `([zZ]|([\\\\+-])${timezone_hours}\\\\:?(${timezone_minutes})?)`\r\n\r\nconst year = '\\\\d{4}'\r\nconst month = '(0[1-9]|1[0-2])'\r\nconst day = '([12]\\\\d|0[1-9]|3[01])'\r\n\r\nexport const ISO_date_regexp = `${year}-${month}-${day}T${time}${timezone}`\r\nexport const ISO_date_matcher = new RegExp('^' + ISO_date_regexp + '$')\r\n\r\n// JSON date deserializer.\r\n//\r\n// Automatically converts ISO serialized `Date`s\r\n// in JSON responses for Ajax HTTP requests.\r\n//\r\n// Without it the developer would have to convert\r\n// `Date` strings to `Date`s in Ajax HTTP responses manually.\r\n//\r\n// Use as the second, 'reviver' argument to `JSON.parse`: `JSON.parse(json, JSON.dateParser)`\r\n//\r\n// http://stackoverflow.com/questions/14488745/javascript-json-date-deserialization/23691273#23691273\r\n\r\n// Walks JSON object tree\r\nexport default function parseDates(object)\r\n{\r\n\t// If it's a date in an ISO string format, then parse it\r\n\tif (typeof object === 'string' && ISO_date_matcher.test(object))\r\n\t{\r\n\t\treturn new Date(object)\r\n\t}\r\n\t// If an array is encountered,\r\n\t// proceed recursively with each element of this array.\r\n\telse if (object instanceof Array)\r\n\t{\r\n\t\tlet i = 0\r\n\t\twhile (i < object.length)\r\n\t\t{\r\n\t\t\tobject[i] = parseDates(object[i])\r\n\t\t\ti++\r\n\t\t}\r\n\t}\r\n\t// If a child JSON object is encountered,\r\n\t// convert all of its `Date` string values to `Date`s,\r\n\t// and proceed recursively for all of its properties.\r\n\telse if (isObject(object))\r\n\t{\r\n\t\tfor (const key of Object.keys(object))\r\n\t\t{\r\n\t\t\t// proceed recursively\r\n\t\t\tobject[key] = parseDates(object[key])\r\n\t\t}\r\n\t}\r\n\r\n\t// Dates have been converted for this JSON object\r\n\treturn object\r\n}"],"file":"parseDates.js"}