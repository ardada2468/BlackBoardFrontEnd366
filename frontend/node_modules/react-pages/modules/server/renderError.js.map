{"version":3,"sources":["../../source/server/renderError.js"],"names":["html","renderError","error","options","process","env","NODE_ENV","renderStackTrace","status","content","contentType","console","log","stack","message","response","headers","split","trim","getStackTrace","original"],"mappings":"AAAA,SAASA,IAAT,QAAqB,aAArB,C,CAEA;;AACA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,OAA5B,EACf;AACC;AACA;AACA;AAEA;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAC1C,QAAI;AAAA,8BAC+BC,gBAAgB,CAACL,KAAD,EAAQC,OAAR,CAD/C;AAAA,oDACKK,MADL;AAAA,UACKA,MADL,sCACc,GADd;AAAA,UACmBC,OADnB,qBACmBA,OADnB;;AAGH,UAAIA,OAAJ,EAAa;AACZ,eAAO;AACND,UAAAA,MAAM,EAANA,MADM;AAENC,UAAAA,OAAO,EAAPA,OAFM;AAGNC,UAAAA,WAAW,EAAE;AAHP,SAAP;AAKA;AACD,KAVD,CAUE,OAAOR,KAAP,EAAc;AACfS,MAAAA,OAAO,CAACC,GAAR,CAAY,mDAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACW,KAAN,IAAeX,KAA3B;AACA;AACD,GArBF,CAuBC;;;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAxBD,CAyBC;;AAEA,SAAO;AACNJ,IAAAA,MAAM,EAAE,OAAON,KAAK,CAACM,MAAb,KAAwB,QAAxB,GAAmCN,KAAK,CAACM,MAAzC,GAAkD,GADpD;AAENC,IAAAA,OAAO,EAAEP,KAAK,CAACY,OAAN,IAAiB,OAFpB;AAGNJ,IAAAA,WAAW,EAAE;AAHP,GAAP;AAKA;;AAED,SAASH,gBAAT,CAA0BL,KAA1B,EAAiCC,OAAjC,EACA;AACC;AACA,MAAID,KAAK,CAACF,IAAV,EAAgB;AACf,WAAO;AACNQ,MAAAA,MAAM,EAAIN,KAAK,CAACM,MADV;AAENC,MAAAA,OAAO,EAAGP,KAAK,CAACF;AAFV,KAAP;AAIA,GAPF,CASC;AACA;;;AACA,MAAI,OAAOE,KAAK,CAACM,MAAb,KAAwB,QAA5B,EAAsC;AACrC;AACA;AACA;AACA,QAAIN,KAAK,CAACa,QAAN,IACAb,KAAK,CAACa,QAAN,CAAeC,OAAf,CAAuB,cAAvB,CADA,IAEAd,KAAK,CAACa,QAAN,CAAeC,OAAf,CAAuB,cAAvB,EAAuCC,KAAvC,CAA6C,GAA7C,EAAkD,CAAlD,EAAqDC,IAArD,OAAgE,WAFpE,EAEiF;AAChF,aAAO;AACNV,QAAAA,MAAM,EAAIN,KAAK,CAACM,MADV;AAENC,QAAAA,OAAO,EAAGP,KAAK,CAACY;AAFV,OAAP;AAIA;AACD,GAvBF,CAyBC;;;AACA,MAAMD,KAAK,GAAGM,aAAa,CAACjB,KAAD,CAA3B,CA1BD,CA4BC;;AACA,MAAI,CAACW,KAAL,EAAY;AACX,WAAO,EAAP;AACA;;AAED,MAAI;AACH,WAAO;AACNJ,MAAAA,OAAO,EAAGT,IAAI,CAAC;AAAEa,QAAAA,KAAK,EAALA;AAAF,OAAD,EAAYV,OAAZ;AADR,KAAP;AAGA,GAJD,CAIE,OAAOD,KAAP,EAAc;AACfS,IAAAA,OAAO,CAACT,KAAR,CAAcA,KAAd;AACA,WAAO;AACNO,MAAAA,OAAO,EAAGP,KAAK,CAACW;AADV,KAAP;AAGA;AACD,C,CAED;;;AACA,SAASM,aAAT,CAAuBjB,KAAvB,EACA;AACC;AACA,MAAIA,KAAK,CAACW,KAAV,EAAiB;AAChB,WAAOX,KAAK,CAACW,KAAb;AACA,GAJF,CAMC;AACA;;;AACA,MAAIX,KAAK,CAACkB,QAAN,IAAkBlB,KAAK,CAACkB,QAAN,CAAeP,KAArC,EAA4C;AAC3C,WAAOX,KAAK,CAACkB,QAAN,CAAeP,KAAtB;AACA;AACD","sourcesContent":["import { html } from 'print-error'\r\n\r\n// Outputs an error page\r\nexport default function renderError(error, options)\r\n{\r\n\t// If the error is caught here it means that `catch`\r\n\t// (error handler parameter) didn't resolve it\r\n\t// (or threw it)\r\n\r\n\t// Show error stack trace in development mode for easier debugging\r\n\tif (process.env.NODE_ENV !== 'production') {\r\n\t\ttry {\r\n\t\t\tconst { status = 500, content } = renderStackTrace(error, options)\r\n\r\n\t\t\tif (content) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus,\r\n\t\t\t\t\tcontent,\r\n\t\t\t\t\tcontentType: 'text/html'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('[react-pages] Couldn\\'t render error stack trace.')\r\n\t\t\tconsole.log(error.stack || error)\r\n\t\t}\r\n\t}\r\n\r\n\t// Log the error\r\n\tconsole.log('[react-pages] Rendering service error')\r\n\t// console.error(error)\r\n\r\n\treturn {\r\n\t\tstatus: typeof error.status === 'number' ? error.status : 500,\r\n\t\tcontent: error.message || 'Error',\r\n\t\tcontentType: 'text/plain'\r\n\t}\r\n}\r\n\r\nfunction renderStackTrace(error, options)\r\n{\r\n\t// Supports custom `html` for an `Error`\r\n\tif (error.html) {\r\n\t\treturn {\r\n\t\t\tstatus  : error.status,\r\n\t\t\tcontent : error.html\r\n\t\t}\r\n\t}\r\n\r\n\t// Handle `superagent` errors: if an error response was an html, then just render it\r\n\t// https://github.com/visionmedia/superagent/blob/29ca1fc938b974c6623d9040a044e39dfb272fed/lib/node/response.js#L106\r\n\tif (typeof error.status === 'number') {\r\n\t\t// If the `superagent` http request returned an html response\r\n\t\t// (possibly an error stack trace),\r\n\t\t// then just output that stack trace\r\n\t\tif (error.response\r\n\t\t\t&& error.response.headers['content-type']\r\n\t\t\t&& error.response.headers['content-type'].split(';')[0].trim() === 'text/html') {\r\n\t\t\treturn {\r\n\t\t\t\tstatus  : error.status,\r\n\t\t\t\tcontent : error.message\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If this error has a stack trace then it can be shown\r\n\tconst stack = getStackTrace(error)\r\n\r\n\t// If this error doesn't have a stack trace - do nothing\r\n\tif (!stack) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\ttry {\r\n\t\treturn {\r\n\t\t\tcontent : html({ stack }, options)\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tconsole.error(error)\r\n\t\treturn {\r\n\t\t\tcontent : error.stack\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Extracts stack trace from `Error`\r\nfunction getStackTrace(error)\r\n{\r\n\t// Standard javascript `Error` stack trace\r\n\tif (error.stack) {\r\n\t\treturn error.stack\r\n\t}\r\n\r\n\t// `superagent` errors have the `original` property\r\n\t// for storing the initial error\r\n\tif (error.original && error.original.stack) {\r\n\t\treturn error.original.stack\r\n\t}\r\n}"],"file":"renderError.js"}