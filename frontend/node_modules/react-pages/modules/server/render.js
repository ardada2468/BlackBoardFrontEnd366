import _regeneratorRuntime from "@babel/runtime/regenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import ReactDOM from 'react-dom/server';
import createStringStream from 'string-to-stream';
import MultiStream from 'multistream';
import { renderBeforeContent, renderAfterContent } from './html';
import normalizeSettings from '../redux/normalize';
import timer from '../timer';
import { getLocationUrl, parseLocation } from '../location';
import reduxRender from '../redux/server/render';
import { initialize as reduxInitialize } from '../redux/server/server';
import { generateMetaTagsMarkup, mergeMeta, convertOpenGraphLocaleToLanguageTag } from '../meta/meta';
export default function (_x, _x2) {
  return _ref2.apply(this, arguments);
}

function _ref2() {
  _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee(settings, _ref) {
    var assets, proxy, url, renderContent, _ref$html, html, cookies, locales, headers, getInitialState, _settings, routes, container, defaultMeta, authentication, onError, codeSplit, location, path, serverSideRender, render, _ref3, newCookies, generateJavascript, parameters, generateOuterHtml, _generateOuterHtml, _generateOuterHtml2, _beforeContent, _afterContent, _ref4, redirect, route, status, content, meta, containerProps, time, _generateOuterHtml3, _generateOuterHtml4, beforeContent, afterContent, streams, pageElement;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            generateOuterHtml = function _ref5(meta) {
              // `html` modifiers
              var head = html.head,
                  bodyStart = html.bodyStart,
                  bodyEnd = html.bodyEnd; // Normalize `html` parameters

              head = typeof head === 'function' ? head(path, parameters) : head;
              bodyStart = typeof bodyStart === 'function' ? bodyStart(path, parameters) : bodyStart;
              bodyEnd = typeof bodyEnd === 'function' ? bodyEnd(path, parameters) : bodyEnd; // Normalize assets

              assets = typeof assets === 'function' ? assets(path, parameters) : assets;

              if (!assets.entries) {
                // Default `assets.entries` to `["main"]`.
                if (assets.javascript && assets.javascript.main) {
                  assets.entries = ['main'];
                } else {
                  throw new Error("\"assets.entries[]\" configuration parameter is required: it includes all Webpack \"entries\" for which javascripts and styles must be included on a server-rendered page. If you didn't set up any custom \"entries\" in Webpack configuration then the default Webpack entry is called \"main\". You don't seem to have the \"main\" entry so the server doesn't know which assets to include on the page (\"['main']\" is the default value for \"assets.entries\").");
                }
              } // Render all HTML that goes before React markup.


              var beforeContent = renderBeforeContent({
                assets: assets,
                locale: meta.locale && convertOpenGraphLocaleToLanguageTag(meta.locale),
                meta: generateMetaTagsMarkup(meta).join(''),
                head: head,
                bodyStart: bodyStart
              }); // Render all HTML that goes after React markup

              var afterContent = renderAfterContent({
                javascript: generateJavascript(),
                assets: assets,
                locales: locales,
                bodyEnd: bodyEnd,
                serverSideRender: serverSideRender,
                contentNotRendered: renderContent === false
              });
              return [beforeContent, afterContent];
            };

            assets = _ref.assets, proxy = _ref.proxy, url = _ref.url, renderContent = _ref.renderContent, _ref$html = _ref.html, html = _ref$html === void 0 ? {} : _ref$html, cookies = _ref.cookies, locales = _ref.locales, headers = _ref.headers, getInitialState = _ref.getInitialState;
            settings = normalizeSettings(settings);
            _settings = settings, routes = _settings.routes, container = _settings.container, defaultMeta = _settings.meta, authentication = _settings.authentication, onError = _settings.onError, codeSplit = _settings.codeSplit;
            location = parseLocation(url);
            path = location.pathname.replace(/\/$/, ''); // A special `base.html` page for static sites.
            // (e.g. the ones hosted on Amazon S3)

            serverSideRender = true;

            if (path === '/react-pages-base') {
              serverSideRender = false;
            } // If Redux is being used, then render for Redux.
            // Else render for pure React.


            render = reduxRender; // `parameters` are used for `assets` and `html` modifiers.

            _context.next = 11;
            return reduxInitialize(settings, {
              proxy: proxy,
              cookies: cookies,
              headers: headers,
              locales: locales,
              url: url,
              getInitialState: getInitialState
            });

          case 11:
            _ref3 = _context.sent;
            newCookies = _ref3.cookies;
            generateJavascript = _ref3.generateJavascript;
            parameters = _objectWithoutProperties(_ref3, ["cookies", "generateJavascript"]);

            if (serverSideRender) {
              _context.next = 18;
              break;
            }

            // Get `<meta/>` for the route.
            _generateOuterHtml = generateOuterHtml(_objectSpread({}, defaultMeta, {}, mergeMeta([]))), _generateOuterHtml2 = _slicedToArray(_generateOuterHtml, 2), _beforeContent = _generateOuterHtml2[0], _afterContent = _generateOuterHtml2[1];
            return _context.abrupt("return", {
              route: '/react-pages-base',
              status: 200,
              content: createStringStream(_beforeContent + _afterContent),
              cookies: []
            });

          case 18:
            _context.next = 20;
            return render(_objectSpread({}, parameters, {
              // routes,
              codeSplit: codeSplit,
              defaultMeta: defaultMeta
            }));

          case 20:
            _ref4 = _context.sent;
            redirect = _ref4.redirect;
            route = _ref4.route;
            status = _ref4.status;
            content = _ref4.content;
            meta = _ref4.meta;
            containerProps = _ref4.containerProps;
            time = _ref4.time;

            if (!redirect) {
              _context.next = 30;
              break;
            }

            return _context.abrupt("return", {
              // Stringify `redirect` location.
              // Prepend `basename` to relative URLs for server-side redirect.
              redirect: getLocationUrl(redirect, {
                basename: settings.basename
              })
            });

          case 30:
            _generateOuterHtml3 = generateOuterHtml(meta), _generateOuterHtml4 = _slicedToArray(_generateOuterHtml3, 2), beforeContent = _generateOuterHtml4[0], afterContent = _generateOuterHtml4[1];
            streams = [createStringStream(beforeContent), createStringStream(afterContent)];

            if (renderContent !== false) {
              // Render page content to a `Stream`
              // inserting this stream in the middle of `streams` array.
              // `array.splice(index, 0, element)` inserts `element` at `index`.
              pageElement = React.createElement(container, containerProps, content);
              streams.splice(streams.length / 2, 0, ReactDOM.renderToNodeStream(pageElement));
            }

            return _context.abrupt("return", {
              route: route,
              status: status,
              content: new MultiStream(streams),
              time: time,
              cookies: newCookies
            });

          case 34:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ref2.apply(this, arguments);
}
//# sourceMappingURL=render.js.map