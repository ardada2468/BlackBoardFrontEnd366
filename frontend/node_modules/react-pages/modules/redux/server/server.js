import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { ISO_date_regexp } from '../../parseDates';
import { safeJsonStringify } from '../../server/html';
import createStore from '../store';
import createHttpClient from '../HttpClient';
import createHistoryProtocol from '../../router/server/createHistoryProtocol';
export function initialize(_x, _x2) {
  return _initialize.apply(this, arguments);
}

function _initialize() {
  _initialize = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee(settings, _ref) {
    var proxy, cookies, headers, locales, url, getInitialState, store, httpClient, initialState;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            proxy = _ref.proxy, cookies = _ref.cookies, headers = _ref.headers, locales = _ref.locales, url = _ref.url, getInitialState = _ref.getInitialState;
            // Create HTTP client (Redux action creator `http` utility)
            httpClient = createHttpClient(settings, function () {
              return store;
            }, {
              proxy: proxy,
              cookies: cookies
            }); // Initial Redux state.
            // `User-Agent` and `Accept-Language` headers were requested:
            // https://github.com/catamphetamine/react-website/issues/72

            initialState = getInitialState ? getInitialState({
              cookies: cookies,
              headers: headers,
              locales: locales
            }) : {}; // Create Redux store.

            store = createStore(settings, initialState, function () {
              return createHistoryProtocol(url);
            }, httpClient, {
              getCookie: function getCookie(name) {
                return cookies[name];
              },
              server: true
            });
            return _context.abrupt("return", {
              store: store,
              generateJavascript: function generateJavascript() {
                return _generateJavascript(store, settings);
              },
              cookies: httpClient.cookiesSetOnServer
            });

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _initialize.apply(this, arguments);
}

function _generateJavascript(store, settings) {
  var code = ''; // JSON Date deserializer

  if (settings.parseDates) {
    code += "<script>".concat(DEFINE_JSON_DATE_PARSER, "</script>");
  } // Store data will be reloaded into the store on the client-side.
  // All forward slashes are escaped to prevent XSS attacks.
  // Another solution would be replacing with `\uxxxx` sequences.
  // https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0


  code += "<script>";
  code += "window._redux_state = JSON.parse(".concat(JSON.stringify(safeJsonStringify(store.getState()))).concat(settings.parseDates ? ', JSON.dateParser' : '', ")");
  code += "</script>";
  return code;
} // JSON date deserializer.
// Use as the second, 'reviver' argument to `JSON.parse(json, JSON.dateParser)`.
// http://stackoverflow.com/questions/14488745/javascript-json-date-deserialization/23691273#23691273
// `JSON.parse(json, JSON.dateParser)` is about 2.5 times slower than `JSON.parse(json)` in Chrome.


var DEFINE_JSON_DATE_PARSER = "\nif (!JSON.dateParser) {\n\tJSON.dateParser = function(key, value) {\n\t\tif (typeof value === 'string' && /^".concat(ISO_date_regexp, "$/.test(value)) {\n\t\t\treturn new Date(value)\n\t\t}\n\t\treturn value\n\t}\n}"); // Since version 6.x, `terser` no longer provides a synchronous `minify()` function.
// import Terser from 'terser'
// DEFINE_JSON_DATE_PARSER = Terser.minify(DEFINE_JSON_DATE_PARSER).code
// Just to be extra safe from XSS attacks

if (DEFINE_JSON_DATE_PARSER.indexOf('<') !== -1) {
  throw new Error('JSON Date parser XSS vulnerability detected');
}
//# sourceMappingURL=server.js.map