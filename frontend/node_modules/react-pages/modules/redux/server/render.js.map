{"version":3,"sources":["../../../source/redux/server/render.js"],"names":["React","timer","mergeMeta","getComponentsMeta","getCodeSplitMeta","matchRoutes","RedirectException","createRouterElement","renderOnServer","store","codeSplit","defaultMeta","time","preloadTimer","renderArgs","redirect","location","load","routes","elements","meta","getState","filter","_","map","type","route","getRoutePath","status","getHttpResponseStatusCodeForTheRoute","content","containerProps","matchedRoutes","reduce","previous","current","path","replace","join"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nimport timer from '../../timer'\r\nimport { mergeMeta, getComponentsMeta, getCodeSplitMeta } from '../../meta/meta'\r\nimport { matchRoutes, RedirectException } from '../../router'\r\nimport createRouterElement from '../../router/server/createRouterElement'\r\n\r\n// Returns a Promise resolving to { status, content, redirect }.\r\n//\r\nexport default async function renderOnServer({\r\n\tstore,\r\n\t// routes,\r\n\tcodeSplit,\r\n\tdefaultMeta\r\n}) {\r\n\t// Routing only takes a couple of milliseconds\r\n\t// const routingTimer = timer()\r\n\r\n\t// Profiling\r\n\tconst time = {}\r\n\r\n\tconst preloadTimer = timer()\r\n\r\n\tlet renderArgs\r\n\ttry {\r\n\t\trenderArgs = await matchRoutes(store)\r\n\t} catch (error) {\r\n\t\t// Catches redirects from `load`s,\r\n\t\t// redirects from `onError` and from `<Redirect/>` routes.\r\n\t\tif (error instanceof RedirectException) {\r\n\t\t\treturn {\r\n\t\t\t\tredirect: error.location\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow error\r\n\t}\r\n\r\n\ttime.load = preloadTimer()\r\n\r\n\t// Gather `<title/>` and `<meta/>` tags for this route path\r\n\tconst { routes, elements } = renderArgs\r\n\r\n\t// Get `<meta/>` for the route.\r\n\tlet meta = codeSplit ? getCodeSplitMeta(routes, store.getState()) : getComponentsMeta(elements.filter(_ => _).map(_ => _.type), store.getState())\r\n\tmeta = mergeMeta(meta)\r\n\tmeta = { ...defaultMeta, ...meta }\r\n\r\n\t// Return HTTP status code and the rendered page\r\n\treturn {\r\n\t\t// Concatenated route `path` string.\r\n\t\t// E.g. \"/user/:user_id/post/:post_id\"\r\n\t\troute   : getRoutePath(routes),\r\n\t\tstatus  : getHttpResponseStatusCodeForTheRoute(routes),\r\n\t\tcontent : createRouterElement(renderArgs),\r\n\t\tmeta,\r\n\t\tcontainerProps : { store },\r\n\t\ttime\r\n\t}\r\n}\r\n\r\n// One can set a `status` prop for a route\r\n// to be returned as an Http response status code (404, etc)\r\nfunction getHttpResponseStatusCodeForTheRoute(matchedRoutes)\r\n{\r\n\treturn matchedRoutes.reduce((previous, current) => (current && current.status) || (previous && current.status), null)\r\n}\r\n\r\n// Returns a complete `path` for matched route chain.\r\n// E.g. returns \"/user/:user_id/post/:post_id\"\r\n// for matched URL \"/user/1/post/123?key=value\".\r\nfunction getRoutePath(routes)\r\n{\r\n\treturn routes\r\n\t\t// Select routes having `path` React property set.\r\n\t\t.filter(route => route.path)\r\n\t\t// Trim leading and trailing slashes (`/`)\r\n\t\t// from each route `path` React property.\r\n\t\t.map(route => route.path.replace(/^\\//, '').replace(/\\/$/, ''))\r\n\t\t// Join route `path`s with slashes (`/`).\r\n\t\t.join('/') || '/'\r\n}"],"file":"render.js"}