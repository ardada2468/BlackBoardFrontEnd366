{"version":3,"sources":["../../../source/redux/preload/preload.js"],"names":["isEqual","redirect","goto","REDIRECT_ACTION_TYPE","GOTO_ACTION_TYPE","RedirectException","isInstantTransition","generatePreloadChain","PRELOAD_FAILED","collectTranslations","PRELOAD_METHOD_NAME","_preload","location","previousLocation","routerArgs","codeSplit","server","getCookie","getLocale","dispatch","getState","_isInstantTransition","action","preloading","previousPreloading","window","__preloading_page","pending","cancelled","cancel","routes","routeParams","routeIndices","params","components","map","_","Component","instrumentDispatch","preload","_routes","_components","filterByChangedRoutes","_react_pages_previous_routes","_react_pages_previous_routes_parameters","preloaders","collectPreloadersFromRoutes","collectPreloadersFromComponents","isInitialClientSidePreload","loadTranslation","promise","Promise","all","resolve","then","error","type","event","payload","filter","component","normalizeLoad","load","rest","options","filtered","filteredByChangedRoutes","previous_routes","previous_routes_parameters","i","length","slice","Array","isArray"],"mappings":"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","sourcesContent":["import isEqual from 'lodash/isEqual'\r\n\r\nimport {\r\n\tredirect,\r\n\tgoto,\r\n\tREDIRECT_ACTION_TYPE,\r\n\tGOTO_ACTION_TYPE,\r\n\tRedirectException\r\n} from '../../router'\r\n\r\nimport { isInstantTransition } from '../client/instantNavigation'\r\n\r\nimport generatePreloadChain from './chain'\r\n\r\nimport { PRELOAD_FAILED } from './actions'\r\n\r\nimport collectTranslations from '../translate/collect'\r\n\r\nimport { PRELOAD_METHOD_NAME } from './decorator'\r\n\r\nexport default function _preload(\r\n\tlocation,\r\n\tpreviousLocation,\r\n\trouterArgs,\r\n\tcodeSplit,\r\n\tserver,\r\n\tgetCookie,\r\n\tgetLocale,\r\n\tdispatch,\r\n\tgetState\r\n) {\r\n\t// If it's an instant \"Back\"/\"Forward\" navigation\r\n\t// then navigate to the page without loading it.\r\n\t// (has been previously preloaded and is in Redux state)\r\n\tconst _isInstantTransition = !server &&\r\n\t\tlocation.action === 'POP' &&\r\n\t\tpreviousLocation &&\r\n\t\tisInstantTransition(previousLocation, location)\r\n\r\n\t// Preload status object.\r\n\t// `preloading` holds the cancellation flag for this navigation process.\r\n\t// (e.g. preloading `Promise` chain could be cancelled in case of a redirect)\r\n\tconst preloading = {}\r\n\r\n\t// Can cancel previous preloading (on the client side)\r\n\tlet previousPreloading\r\n\tif (!server) {\r\n\t\tpreviousPreloading = window.__preloading_page\r\n\t\twindow.__preloading_page = preloading\r\n\t}\r\n\r\n\tif (!server) {\r\n\t\t// If on the client side, then store the current pending navigation,\r\n\t\t// so that it can be cancelled when a new navigation process takes place\r\n\t\t// before the current navigation process finishes.\r\n\t\t//\r\n\t\t// If there's preceeding navigation pending,\r\n\t\t// then cancel that previous navigation.\r\n\t\tif (previousPreloading && previousPreloading.pending && !previousPreloading.cancelled) {\r\n\t\t\tpreviousPreloading.cancel()\r\n\t\t}\r\n\t}\r\n\r\n\tconst { routes, routeParams, routeIndices, params } = routerArgs\r\n\tconst components = routes.map(_ => _.Component)\r\n\r\n\t// Instrument `dispatch`.\r\n\t// `dispatch` for server side `throw`s a special \"redirect error\" on redirect.\r\n\t// `dispatch` for client side cancels current `load` on redirect.\r\n\tdispatch = instrumentDispatch(dispatch, server, preloading)\r\n\r\n\t// Preload all the required data for this route (page)\r\n\tlet preload\r\n\tif (!_isInstantTransition) {\r\n\t\tlet _routes = routes\r\n\t\tlet _components = components\r\n\r\n\t\t// Client-side optimization.\r\n\t\t// Skips `load`s for routes that didn't change as a result of navigation.\r\n\t\tif (!server) {\r\n\t\t\tif (codeSplit) {\r\n\t\t\t\t_routes = filterByChangedRoutes(_routes, routeIndices, routeParams)\r\n\t\t\t} else {\r\n\t\t\t\t_components = filterByChangedRoutes(_components, routeIndices, routeParams)\r\n\t\t\t}\r\n\t\t\twindow._react_pages_previous_routes = routeIndices\r\n\t\t\twindow._react_pages_previous_routes_parameters = routeParams\r\n\t\t}\r\n\r\n\t\t// Get all `preload` methods on the React-Router component chain\r\n\t\tconst preloaders = codeSplit ? collectPreloadersFromRoutes(_routes) : collectPreloadersFromComponents(_components)\r\n\r\n\t\tconst isInitialClientSidePreload = !server && !previousLocation\r\n\r\n\t\tpreload = generatePreloadChain(\r\n\t\t\tpreloaders,\r\n\t\t\tserver,\r\n\t\t\tisInitialClientSidePreload,\r\n\t\t\tgetState,\r\n\t\t\tdispatch,\r\n\t\t\tlocation,\r\n\t\t\tparams,\r\n\t\t\tgetCookie,\r\n\t\t\tpreloading\r\n\t\t)\r\n\t}\r\n\r\n\t// Load translations (if any).\r\n\tlet loadTranslation\r\n\tif (getLocale) {\r\n\t\tloadTranslation = collectTranslations(\r\n\t\t\tcomponents,\r\n\t\t\troutes,\r\n\t\t\trouteIndices,\r\n\t\t\tcodeSplit,\r\n\t\t\tgetLocale(getState()),\r\n\t\t\tdispatch\r\n\t\t)\r\n\t}\r\n\r\n\t// Combine promises.\r\n\tlet promise\r\n\tif (preload) {\r\n\t\tif (loadTranslation) {\r\n\t\t\tpromise = Promise.all([preload(), loadTranslation()])\r\n\t\t} else {\r\n\t\t\tpromise = preload()\r\n\t\t}\r\n\t} else if (loadTranslation) {\r\n\t\tpromise = loadTranslation()\r\n\t}\r\n\r\n\t// If nothing to preload, just move to the next middleware\r\n\tif (!promise) {\r\n\t\treturn Promise.resolve()\r\n\t}\r\n\r\n\tpreloading.pending = true\r\n\r\n\t// Preloading process cancellation\r\n\tpreloading.cancel = () => {\r\n\t\tpreloading.cancelled = true\r\n\t\t// If `bluebird` is used,\r\n\t\t// and promise cancellation has been set up,\r\n\t\t// then cancel the `Promise`.\r\n\t\t// http://bluebirdjs.com/docs/api/cancellation.html\r\n\t\tif (promise.cancel) {\r\n\t\t\t// `.catch()` is to suppress \"Uncaught promise rejection\" errors\r\n\t\t\tpromise.catch(() => ({})).cancel()\r\n\t\t}\r\n\t}\r\n\r\n\treturn promise.then(\r\n\t\t// Navigate to the new page\r\n\t\t() => {\r\n\t\t\tpreloading.pending = false\r\n\t\t\t// If this navigation process was cancelled\r\n\t\t\t// before `load` finished its work,\r\n\t\t\t// then don't take any further steps on this cancelled navigation.\r\n\t\t\tif (preloading.cancelled) {\r\n\t\t\t\t// Return `false` out of the `Promise`\r\n\t\t\t\t// indicating that the navigation was cancelled.\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t},\r\n\t\t(error) => {\r\n\t\t\t// If this navigation process was cancelled\r\n\t\t\t// before `load` finished its work,\r\n\t\t\t// then don't take any further steps on this cancelled navigation.\r\n\t\t\tif (!preloading.cancelled) {\r\n\t\t\t\tif (!server) {\r\n\t\t\t\t\tpreloading.error = error\r\n\t\t\t\t}\r\n\t\t\t\t// Page loading indicator could listen for this event\r\n\t\t\t\tdispatch({ type: PRELOAD_FAILED, error })\r\n\t\t\t}\r\n\t\t\t// Update preload status object\r\n\t\t\tpreloading.pending = false\r\n\t\t\t// May be a server-side special \"redirect\" error.\r\n\t\t\tthrow error\r\n\t\t}\r\n\t)\r\n}\r\n\r\n// Instrument `dispatch`.\r\n// `dispatch` for server side `throw`s a special \"redirect error\" on redirect.\r\n// `dispatch` for client side cancels current `load` on redirect.\r\nfunction instrumentDispatch(dispatch, server, preloading) {\r\n\treturn (event) => {\r\n\t\tswitch (event.type) {\r\n\t\t\t// In case of navigation from `load`.\r\n\t\t\tcase REDIRECT_ACTION_TYPE:\r\n\t\t\tcase GOTO_ACTION_TYPE:\r\n\t\t\t\t// Discard the currently ongoing preloading.\r\n\t\t\t\t// (if some kind of a `bluebird` is used)\r\n\t\t\t\tif (preloading.cancel) {\r\n\t\t\t\t\tpreloading.cancel()\r\n\t\t\t\t}\r\n\t\t\t\t// if (!server && window._react_pages_skip_preload_update_location) {\r\n\t\t\t\t// \tconsole.warn('Looks like you\\'re calling `dispatch(pushLocation())` or `dispatch(replaceLocation())` inside `load`. Call them in `onLoaded()` instead.')\r\n\t\t\t\t// }\r\n\t\t\t\tthrow new RedirectException(event.payload)\r\n\t\t\tdefault:\r\n\t\t\t\t// Proceed normally.\r\n\t\t\t\treturn dispatch(event)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Finds all `preload` (or `preload_deferred`) methods\r\n// (they will be executed in parallel).\r\n//\r\n// @parameter components - matched routes' components.\r\n//\r\n// @returns an array of `component_preloaders`.\r\n// `component_preloaders` is an array of all\r\n// `load`s for a particular React component:\r\n// objects having shape `{ preload(), options }`.\r\n// Therefore the returned value is an array of arrays.\r\n//\r\nexport function collectPreloadersFromComponents(components)\r\n{\r\n\t// Find all static `preload` methods on the route component chain\r\n\treturn components\r\n\t\t// Some wrapper routes can have no `component`.\r\n\t\t// Select all components having `load`s.\r\n\t\t.filter(component => component && component[PRELOAD_METHOD_NAME])\r\n\t\t// Extract `load` functions and their options.\r\n\t\t.map(component => normalizeLoad(component[PRELOAD_METHOD_NAME]).map(({ load, ...rest }) => ({\r\n\t\t\tpreload: load,\r\n\t\t\toptions: rest\r\n\t\t})))\r\n\t\t// // Flatten `load` functions and their options.\r\n\t\t// .reduce((all, preload_and_options) => all.concat(preload_and_options), [])\r\n}\r\n\r\nfunction collectPreloadersFromRoutes(routes) {\r\n\t// Find all preload properties on the route chain.\r\n\treturn routes\r\n\t\t.map(_ => _.load)\r\n\t\t.filter(_ => _)\r\n\t\t.map((load) => {\r\n\t\t\treturn normalizeLoad(load).map(({ load, ...rest }) => ({\r\n\t\t\t\tpreload: load,\r\n\t\t\t\toptions: rest\r\n\t\t\t}))\r\n\t\t})\r\n\t\t// Flatten the array.\r\n\t\t// .reduce((all, preload_and_options) => all.concat(preload_and_options), [])\r\n}\r\n\r\n// A minor optimization for skipping `load`s\r\n// for those parent routes which haven't changed\r\n// as a result of a client-side navigation.\r\n//\r\n// On client side:\r\n//\r\n// Take the previous route components\r\n// (along with their parameters)\r\n// and the next route components\r\n// (along with their parameters),\r\n// and compare them side-by-side\r\n// filtering out the same top level components\r\n// (both having the same component classes\r\n//  and having the same parameters).\r\n//\r\n// Therefore `load`s could be skipped\r\n// for those top level components which remain\r\n// the same (and in the same state).\r\n// This would be an optimization.\r\n//\r\n// (e.g. the main route could be `load`ed only once - on the server side)\r\n//\r\n// At the same time, at least one component should be preloaded:\r\n// even if navigating to the same page it still kinda makes sense to reload it.\r\n// (assuming it's not an \"anchor\" hyperlink navigation)\r\n//\r\n// Also, GET query parameters would also need to be compared, I guess.\r\n// But, I guess, it would make sense to assume that GET parameters\r\n// only affect the last routes component in the chain.\r\n// And, in general, GET query parameters should be avoided,\r\n// but that's not the case for example with search forms.\r\n// So here we assume that GET query parameters only\r\n// influence the last route component in the chain\r\n// which is gonna be reloaded anyway.\r\n//\r\nfunction filterByChangedRoutes(filtered, routes, routeParams)\r\n{\r\n\tlet filteredByChangedRoutes = filtered\r\n\r\n\tif (window._react_pages_previous_routes)\r\n\t{\r\n\t\tconst previous_routes = window._react_pages_previous_routes\r\n\t\tconst previous_routes_parameters = window._react_pages_previous_routes_parameters\r\n\r\n\t\tlet i = 0\r\n\t\twhile (i < routes.length - 1 &&\r\n\t\t\tprevious_routes[i] === routes[i] &&\r\n\t\t\tisEqual(previous_routes_parameters[i], routeParams[i]))\r\n\t\t{\r\n\t\t\ti++\r\n\t\t}\r\n\r\n\t\tfilteredByChangedRoutes = filteredByChangedRoutes.slice(i)\r\n\t}\r\n\r\n\treturn filteredByChangedRoutes\r\n}\r\n\r\nfunction normalizeLoad(load) {\r\n\tif (typeof load === 'function') {\r\n\t\tload = { load }\r\n\t}\r\n\tif (!Array.isArray(load)) {\r\n\t\tload = [load]\r\n\t}\r\n\treturn load\r\n}"],"file":"preload.js"}