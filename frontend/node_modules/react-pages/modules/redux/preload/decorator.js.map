{"version":3,"sources":["../../../source/redux/preload/decorator.js"],"names":["PRELOAD_METHOD_NAME","preload","load","options","Component","unshift"],"mappings":";;;;;;AAAA,OAAO,IAAMA,mBAAmB,GAAG,MAA5B,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,OAAvB,EAAgC;AAC9C,SAAO,UAASC,SAAT,EAAoB;AAC1B;AACA;AACAA,IAAAA,SAAS,CAACJ,mBAAD,CAAT,GAAiCI,SAAS,CAACJ,mBAAD,CAAT,IAAkC,EAAnE;AACAI,IAAAA,SAAS,CAACJ,mBAAD,CAAT,CAA+BK,OAA/B;AACCH,MAAAA,IAAI,EAAJA;AADD,OAEIC,OAFJ;AAIA,WAAOC,SAAP;AACA,GATD;AAUA","sourcesContent":["export const PRELOAD_METHOD_NAME = 'load'\r\n\r\n// This decorator is deprecated, use `load`\r\n// static property on a page component instead.\r\n//\r\n// `@preload(preloader, [options])` decorator.\r\n//\r\n// `preloader` function must return a `Promise` (or be `async`):\r\n//\r\n// `function preloader({ dispatch, getState, location, params, server })`.\r\n//\r\n// The decorator also receives an optional `options` argument (advanced topic):\r\n//\r\n// * `blocking` — If `false` then all child routes  `@preload()`s will not\r\n//                wait for this `@preload()` to finish in order to get executed\r\n//                (is `true` by default).\r\n//\r\n// * `blockingSibling` — If `true` then all further adjacent (sibling) `@preload()`s\r\n//                       for the same routes component will wait for this\r\n//                       `@preload()` to finish in order to get executed.\r\n//                       (is `true` by default).\r\n//\r\n// * `client`   — If `true` then the `@preload()` will be executed only on client side.\r\n//                Otherwise the `@preload()` will be executed normally:\r\n//                if part of initial page preloading then on server side and\r\n//                if part of subsequent preloading (e.g. navigation) then on client side.\r\n//\r\n// * `server`   — If `true` then the `@preload()` will be executed only on server side.\r\n//                Otherwise the `@preload()` will be executed normally:\r\n//                if part of initial page preloading then on server side and\r\n//                if part of subsequent preloading (e.g. navigation) then on client side.\r\n//\r\nexport default function preload(load, options) {\r\n\treturn function(Component) {\r\n\t\t// Since there can be several `@preload()`s\r\n\t\t// on a single component, using arrays here.\r\n\t\tComponent[PRELOAD_METHOD_NAME] = Component[PRELOAD_METHOD_NAME] || []\r\n\t\tComponent[PRELOAD_METHOD_NAME].unshift({\r\n\t\t\tload,\r\n\t\t\t...options\r\n\t\t})\r\n\t\treturn Component\r\n\t}\r\n}"],"file":"decorator.js"}