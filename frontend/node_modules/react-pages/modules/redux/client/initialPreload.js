function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import ReactDOM from 'react-dom';
import { Loading } from '../../components/Loading'; // In cases when the initial page immediately redirects
// to another page (for example, to a "not found" page),
// `node` and `ref` would get overwritten have they been
// simple variables and not arrays.

var nodes = [];
var refs = [];

var LoadingContainer =
/*#__PURE__*/
function (_React$Component) {
  _inherits(LoadingContainer, _React$Component);

  function LoadingContainer() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, LoadingContainer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LoadingContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      loading: true
    });

    return _this;
  }

  _createClass(LoadingContainer, [{
    key: "render",
    value: function render() {
      var loading = this.state.loading;
      return React.createElement(Loading, {
        initial: loading,
        immediate: loading,
        pending: loading
      });
    }
  }]);

  return LoadingContainer;
}(React.Component);

export function showInitialPreload() {
  var node = document.createElement('div');
  nodes.push(node); // Will prepend `element` to `<body/>` (even if `<body/>` is empty).
  // https://stackoverflow.com/questions/2007357/how-to-set-dom-element-as-the-first-child

  document.body.insertBefore(node, document.body.firstChild);

  var setRef = function setRef(ref) {
    var index = nodes.indexOf(node);

    if (index >= 0) {
      refs[index] = ref;
    }
  };

  ReactDOM.render(React.createElement(LoadingContainer, {
    ref: setRef
  }), node);
}
export function hideInitialPreload() {
  var node = nodes.pop();
  var ref = refs.pop();
  ref.setState({
    loading: false
  }, function () {
    setTimeout(function () {
      ReactDOM.unmountComponentAtNode(node);
      document.body.removeChild(node);
    }, 160);
  });
}
//# sourceMappingURL=initialPreload.js.map