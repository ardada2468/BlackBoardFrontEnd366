{"version":3,"sources":["../../../source/redux/client/setUpAndRender.js"],"names":["clientSideRender","isServerSidePreloaded","getCookie","render","getState","createHttpClient","normalizeSettings","createStore","resetInstantNavigationChain","createHistoryProtocol","redirect","_RESOLVE_MATCH","pushLocation","RedirectException","showInitialPreload","hideInitialPreload","setUpAndRender","settings","options","devtools","stats","onBeforeNavigate","onNavigate","onStoreCreated","store","httpClient","window","_react_pages_http_client","showLoadingInitially","_react_pages_initial_prerender","_react_pages_skip_preload","showingInitialPreload","container","renderParameters","then","result","dispatch","document","location","type","payload","_react_pages_update_match_event_payload","error","key","indexOf","undefined"],"mappings":"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","sourcesContent":["import clientSideRender from '../../client/render'\r\nimport { isServerSidePreloaded } from '../../client/flags'\r\nimport { getCookie } from '../../client/cookies'\r\nimport render from './render'\r\nimport getState from './getState'\r\nimport createHttpClient from '../HttpClient'\r\nimport normalizeSettings from '../normalize'\r\nimport createStore from '../store'\r\nimport { resetInstantNavigationChain } from './instantNavigation'\r\nimport createHistoryProtocol from '../../router/client/createHistoryProtocol'\r\nimport { redirect, _RESOLVE_MATCH, pushLocation, RedirectException } from '../../router'\r\nimport { showInitialPreload, hideInitialPreload } from './initialPreload'\r\n\r\n// This function is what's gonna be called from the project's code on the client-side.\r\n//\r\n// There are two passes of client-side render happening here.\r\n// React has the concept of \"re-hydration\" which demands that\r\n// the initial client-side React rendering results be equal to\r\n// the server-side React rendering results, character-by-character.\r\n// Otherwise it complains.\r\n// That's the reason why the application on client side first performs\r\n// a \"dummy\" rendering without resolving any `load`s, just to complete\r\n// the React \"hydration\" process, and only when the \"hydration\" process finishes\r\n// does it perform the second pass of rendering the page,\r\n// now resolving all client-side `load`s.\r\n// Therefore, the first pass of `.render()`Â always happens with data missing\r\n// if that data is loaded in \"client-side only\" `load`s.\r\n// (that is, the `load`s configured with `{ client: true }`).\r\n//\r\n// If React \"re-hydration\" step didn't exist\r\n// then the library would first execute all client-side preloads\r\n// and only then would it render the application.\r\n// That would be more intuitive and convenient for developers I guess.\r\n//\r\nexport default function setUpAndRender(settings, options = {}) {\r\n\r\n\tsettings = normalizeSettings(settings)\r\n\r\n\tconst {\r\n\t\tdevtools,\r\n\t\tstats,\r\n\t\tonBeforeNavigate,\r\n\t\tonNavigate,\r\n\t\tonStoreCreated\r\n\t} = options\r\n\r\n\t// Redux store.\r\n\tlet store\r\n\r\n\t// Create HTTP client (Redux action creator `http` utility)\r\n\tconst httpClient = createHttpClient(settings, () => store)\r\n\t// E.g. for WebSocket message handlers, since they only run on the client side.\r\n\twindow._react_pages_http_client = httpClient\r\n\r\n\t// Reset \"instant back\" on page reload\r\n\t// since Redux state is cleared.\r\n\t// \"instant back\" chain is stored in `window.sessionStorage`\r\n\t// and therefore it survives page reload.\r\n\tresetInstantNavigationChain()\r\n\r\n\t// `showLoadingInitially` is handled in a special way\r\n\t// in case of client-side-only rendering.\r\n\tconst showLoadingInitially = settings.showLoadingInitially\r\n\r\n\t// The first pass of initial client-side render\r\n\t// is to render the markup which matches server-side one.\r\n\t// The second pass will be to render after resolving `getData`.\r\n\tif (isServerSidePreloaded()) {\r\n\t\twindow._react_pages_initial_prerender = true\r\n\t\twindow._react_pages_skip_preload = true\r\n\t}\r\n\r\n\t// Create Redux store\r\n\tstore = createStore(\r\n\t\t{\r\n\t\t\t...settings,\r\n\t\t\tshowLoadingInitially: !isServerSidePreloaded() && showLoadingInitially ? false : showLoadingInitially\r\n\t\t},\r\n\t\tgetState(true),\r\n\t\tcreateHistoryProtocol,\r\n\t\thttpClient, {\r\n\t\t\tdevtools,\r\n\t\t\tstats,\r\n\t\t\tonBeforeNavigate,\r\n\t\t\tonNavigate,\r\n\t\t\tgetCookie\r\n\t\t}\r\n\t)\r\n\r\n\t// `onStoreCreated(store)` is called here.\r\n\t//\r\n\t// For example, client-side-only applications\r\n\t// may capture this `store` as `window.store`\r\n\t// to call `bindActionCreators()` for all actions (globally).\r\n\t//\r\n\t// onStoreCreated: store => window.store = store\r\n\t//\r\n\t// import { bindActionCreators } from 'redux'\r\n\t// import actionCreators from './actions'\r\n\t// const boundActionCreators = bindActionCreators(actionCreators, window.store.dispatch)\r\n\t// export default boundActionCreators\r\n\t//\r\n\t// Not saying that this is even a \"good\" practice,\r\n\t// more like \"legacy code\", but still my employer\r\n\t// happened to have such binding, so I added this feature.\r\n  // Still this technique cuts down on a lot of redundant \"wiring\" code.\r\n  //\r\n\tif (onStoreCreated) {\r\n\t\tonStoreCreated(store)\r\n\t}\r\n\r\n\t// Render loading indicator in case of client-side-only rendering\r\n\t// because the main application React tree won't be rendered\r\n\t// until `load`s finish.\r\n\tlet showingInitialPreload = false\r\n\tif (!isServerSidePreloaded() && showLoadingInitially) {\r\n\t\tshowInitialPreload()\r\n\t\tshowingInitialPreload = true\r\n\t}\r\n\r\n\t// Render the page.\r\n\t// If it's a server-side rendering case then that will be the\r\n\t// first pass, without loading data, just for `React.hydrate()`.\r\n\t// If it's a client-side rendering case then that will be the\r\n\t// first pass with loading data.\r\n\treturn clientSideRender({\r\n\t\tcontainer: settings.container,\r\n\t\trender,\r\n\t\trenderParameters: {\r\n\t\t\tstore\r\n\t\t}\r\n\t})\r\n\t.then((result) => {\r\n\t\t// Perform the second pass of initial client-side rendering.\r\n\t\t// The second pass resolves `getData` on routes.\r\n\t\t// (which means it resolves all client-side `load`s)\r\n\t\tif (isServerSidePreloaded()) {\r\n\t\t\tstore.dispatch(redirect(document.location))\r\n\t\t} else {\r\n\t\t\t// Hide the \"initial\" loading indicator.\r\n\t\t\tif (showingInitialPreload) {\r\n\t\t\t\thideInitialPreload()\r\n\t\t\t}\r\n\t\t\t// `RESOLVE_MATCH` is not being dispatched\r\n\t\t\t// for the first render for some reason.\r\n\t\t\t// https://github.com/4Catalyzer/found/issues/202\r\n\t\t\t// With server-side rendering enabled\r\n\t\t\t// initially there are two rendering passes\r\n\t\t\t// and therefore `RESOLVE_MATCH` does get dispatched\r\n\t\t\t// after the page is initialized and rendered.\r\n\t\t\t// With server-side rendering disabled\r\n\t\t\t// `RESOLVE_MATCH` does not get dispatched\r\n\t\t\t// therefore a custom `_RESOLVE_MATCH` event is\r\n\t\t\t// dispatched manually.\r\n\t\t\tstore.dispatch({\r\n\t\t\t\ttype: _RESOLVE_MATCH,\r\n\t\t\t\tpayload: window._react_pages_update_match_event_payload\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn result\r\n\t}, (error) => {\r\n\t\t// Hide the \"initial\" loading indicator.\r\n\t\tif (showingInitialPreload) {\r\n\t\t\thideInitialPreload()\r\n\t\t}\r\n\t\t// Catches redirects from `load`s,\r\n\t\t// redirects from `onError` and from `<Redirect/>` routes.\r\n\t\tif (error instanceof RedirectException) {\r\n\t\t\t// Change current location.\r\n\t\t\tstore.dispatch(pushLocation(error.location))\r\n\t\t\t// Reset all `react-pages` flags.\r\n\t\t\tfor (const key in window) {\r\n\t\t\t\tif (key.indexOf('_react_pages_') === 0 && key !== '_react_pages_locales') {\r\n\t\t\t\t\twindow[key] = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Re-render.\r\n\t\t\treturn setUpAndRender(settings, options)\r\n\t\t}\r\n\t\tthrow error\r\n\t})\r\n}"],"file":"setUpAndRender.js"}