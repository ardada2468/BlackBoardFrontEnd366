function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import React from 'react';
import { Provider } from 'react-redux';
import { clone } from '../helpers'; // Normalizes common settings

export default function normalizeSettings(settings) {
  if (settings === undefined) {
    throw new Error("Common settings weren't passed.");
  }

  if (_typeof(settings) !== 'object') {
    throw new Error("Expected a settings object, got ".concat(_typeof(settings), ": ").concat(settings));
  }

  settings = clone(settings);

  if (!settings.routes) {
    throw new Error("\"routes\" parameter is required");
  }

  if (!settings.reducers) {
    throw new Error("\"reducers\" parameter is required");
  }

  if (!settings.container) {
    // By default it wraps everything with Redux `<Provider/>`.
    settings.container = function Container(_ref) {
      var store = _ref.store,
          children = _ref.children;
      return React.createElement(Provider, {
        store: store
      }, children);
    };
  }

  if (settings.hot) {
    settings.container = settings.hot(module)(settings.container);
  } // Default value for `parseDates` is `true`


  if (settings.parseDates !== false) {
    settings.parseDates = true;
  }

  if (!settings.http) {
    settings.http = {};
  }

  if (!settings.authentication) {
    settings.authentication = {};
  }

  return settings;
}
//# sourceMappingURL=normalize.js.map