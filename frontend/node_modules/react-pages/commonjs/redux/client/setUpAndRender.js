"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = setUpAndRender;

var _render = _interopRequireDefault(require("../../client/render"));

var _flags = require("../../client/flags");

var _cookies = require("../../client/cookies");

var _render2 = _interopRequireDefault(require("./render"));

var _getState = _interopRequireDefault(require("./getState"));

var _HttpClient = _interopRequireDefault(require("../HttpClient"));

var _normalize = _interopRequireDefault(require("../normalize"));

var _store = _interopRequireDefault(require("../store"));

var _instantNavigation = require("./instantNavigation");

var _createHistoryProtocol = _interopRequireDefault(require("../../router/client/createHistoryProtocol"));

var _router = require("../../router");

var _initialPreload = require("./initialPreload");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function setUpAndRender(settings) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  settings = (0, _normalize["default"])(settings);
  var devtools = options.devtools,
      stats = options.stats,
      onBeforeNavigate = options.onBeforeNavigate,
      onNavigate = options.onNavigate,
      onStoreCreated = options.onStoreCreated; // Redux store.

  var store; // Create HTTP client (Redux action creator `http` utility)

  var httpClient = (0, _HttpClient["default"])(settings, function () {
    return store;
  }); // E.g. for WebSocket message handlers, since they only run on the client side.

  window._react_pages_http_client = httpClient; // Reset "instant back" on page reload
  // since Redux state is cleared.
  // "instant back" chain is stored in `window.sessionStorage`
  // and therefore it survives page reload.

  (0, _instantNavigation.resetInstantNavigationChain)(); // `showLoadingInitially` is handled in a special way
  // in case of client-side-only rendering.

  var showLoadingInitially = settings.showLoadingInitially; // The first pass of initial client-side render
  // is to render the markup which matches server-side one.
  // The second pass will be to render after resolving `getData`.

  if ((0, _flags.isServerSidePreloaded)()) {
    window._react_pages_initial_prerender = true;
    window._react_pages_skip_preload = true;
  } // Create Redux store


  store = (0, _store["default"])(_objectSpread({}, settings, {
    showLoadingInitially: !(0, _flags.isServerSidePreloaded)() && showLoadingInitially ? false : showLoadingInitially
  }), (0, _getState["default"])(true), _createHistoryProtocol["default"], httpClient, {
    devtools: devtools,
    stats: stats,
    onBeforeNavigate: onBeforeNavigate,
    onNavigate: onNavigate,
    getCookie: _cookies.getCookie
  }); // `onStoreCreated(store)` is called here.
  //
  // For example, client-side-only applications
  // may capture this `store` as `window.store`
  // to call `bindActionCreators()` for all actions (globally).
  //
  // onStoreCreated: store => window.store = store
  //
  // import { bindActionCreators } from 'redux'
  // import actionCreators from './actions'
  // const boundActionCreators = bindActionCreators(actionCreators, window.store.dispatch)
  // export default boundActionCreators
  //
  // Not saying that this is even a "good" practice,
  // more like "legacy code", but still my employer
  // happened to have such binding, so I added this feature.
  // Still this technique cuts down on a lot of redundant "wiring" code.
  //

  if (onStoreCreated) {
    onStoreCreated(store);
  } // Render loading indicator in case of client-side-only rendering
  // because the main application React tree won't be rendered
  // until `load`s finish.


  var showingInitialPreload = false;

  if (!(0, _flags.isServerSidePreloaded)() && showLoadingInitially) {
    (0, _initialPreload.showInitialPreload)();
    showingInitialPreload = true;
  } // Render the page.
  // If it's a server-side rendering case then that will be the
  // first pass, without loading data, just for `React.hydrate()`.
  // If it's a client-side rendering case then that will be the
  // first pass with loading data.


  return (0, _render["default"])({
    container: settings.container,
    render: _render2["default"],
    renderParameters: {
      store: store
    }
  }).then(function (result) {
    // Perform the second pass of initial client-side rendering.
    // The second pass resolves `getData` on routes.
    // (which means it resolves all client-side `load`s)
    if ((0, _flags.isServerSidePreloaded)()) {
      store.dispatch((0, _router.redirect)(document.location));
    } else {
      // Hide the "initial" loading indicator.
      if (showingInitialPreload) {
        (0, _initialPreload.hideInitialPreload)();
      } // `RESOLVE_MATCH` is not being dispatched
      // for the first render for some reason.
      // https://github.com/4Catalyzer/found/issues/202
      // With server-side rendering enabled
      // initially there are two rendering passes
      // and therefore `RESOLVE_MATCH` does get dispatched
      // after the page is initialized and rendered.
      // With server-side rendering disabled
      // `RESOLVE_MATCH` does not get dispatched
      // therefore a custom `_RESOLVE_MATCH` event is
      // dispatched manually.


      store.dispatch({
        type: _router._RESOLVE_MATCH,
        payload: window._react_pages_update_match_event_payload
      });
    }

    return result;
  }, function (error) {
    // Hide the "initial" loading indicator.
    if (showingInitialPreload) {
      (0, _initialPreload.hideInitialPreload)();
    } // Catches redirects from `load`s,
    // redirects from `onError` and from `<Redirect/>` routes.


    if (error instanceof _router.RedirectException) {
      // Change current location.
      store.dispatch((0, _router.pushLocation)(error.location)); // Reset all `react-pages` flags.

      for (var key in window) {
        if (key.indexOf('_react_pages_') === 0 && key !== '_react_pages_locales') {
          window[key] = undefined;
        }
      } // Re-render.


      return setUpAndRender(settings, options);
    }

    throw error;
  });
}
//# sourceMappingURL=setUpAndRender.js.map