"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = preload;
exports.PRELOAD_METHOD_NAME = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PRELOAD_METHOD_NAME = 'load'; // This decorator is deprecated, use `load`
// static property on a page component instead.
//
// `@preload(preloader, [options])` decorator.
//
// `preloader` function must return a `Promise` (or be `async`):
//
// `function preloader({ dispatch, getState, location, params, server })`.
//
// The decorator also receives an optional `options` argument (advanced topic):
//
// * `blocking` — If `false` then all child routes  `@preload()`s will not
//                wait for this `@preload()` to finish in order to get executed
//                (is `true` by default).
//
// * `blockingSibling` — If `true` then all further adjacent (sibling) `@preload()`s
//                       for the same routes component will wait for this
//                       `@preload()` to finish in order to get executed.
//                       (is `true` by default).
//
// * `client`   — If `true` then the `@preload()` will be executed only on client side.
//                Otherwise the `@preload()` will be executed normally:
//                if part of initial page preloading then on server side and
//                if part of subsequent preloading (e.g. navigation) then on client side.
//
// * `server`   — If `true` then the `@preload()` will be executed only on server side.
//                Otherwise the `@preload()` will be executed normally:
//                if part of initial page preloading then on server side and
//                if part of subsequent preloading (e.g. navigation) then on client side.
//

exports.PRELOAD_METHOD_NAME = PRELOAD_METHOD_NAME;

function preload(load, options) {
  return function (Component) {
    // Since there can be several `@preload()`s
    // on a single component, using arrays here.
    Component[PRELOAD_METHOD_NAME] = Component[PRELOAD_METHOD_NAME] || [];
    Component[PRELOAD_METHOD_NAME].unshift(_objectSpread({
      load: load
    }, options));
    return Component;
  };
}
//# sourceMappingURL=decorator.js.map