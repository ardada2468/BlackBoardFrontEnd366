"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createHttpClient;

var _HttpClient = _interopRequireDefault(require("../HttpClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createHttpClient(settings, getStore) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var onBeforeSend;
  var catchToRetry;
  var getAuthToken; // Add `getState()` to `http.onRequest()` parameters.

  if (settings.http.onRequest) {
    onBeforeSend = function onBeforeSend(request, parameters) {
      settings.http.onRequest(request, _objectSpread({}, parameters, {
        getState: getStore().getState
      }));
    };
  } // Add `store` and `http` helpers to `http.catch`


  if (settings.http["catch"]) {
    catchToRetry = function catchToRetry(error, retryCount, helpers) {
      return settings.http["catch"](error, retryCount, helpers); // {
      // 	...helpers,
      // 	store: getStore()
      // })
    };
  } // Add `store` helper to `authentication.accessToken`


  if (settings.authentication.accessToken) {
    getAuthToken = function getAuthToken(getCookie, helpers) {
      return settings.authentication.accessToken(_objectSpread({}, helpers, {
        getCookie: getCookie,
        getState: getStore().getState
      }));
    };
  }

  return new _HttpClient["default"](_objectSpread({
    onBeforeSend: onBeforeSend,
    catchToRetry: catchToRetry,
    getAuthToken: getAuthToken,
    transformUrl: settings.http.transformUrl,
    parseDates: settings.parseDates,
    authTokenHeader: settings.authentication.header
  }, options));
}
//# sourceMappingURL=HttpClient.js.map