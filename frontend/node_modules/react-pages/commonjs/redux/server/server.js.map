{"version":3,"sources":["../../../source/redux/server/server.js"],"names":["initialize","settings","proxy","cookies","headers","locales","url","getInitialState","httpClient","store","initialState","getCookie","name","server","generateJavascript","cookiesSetOnServer","code","parseDates","DEFINE_JSON_DATE_PARSER","JSON","stringify","getState","ISO_date_regexp","indexOf","Error"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;SAEsBA,U;;;;;;;+BAAf,iBAA0BC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACNC,YAAAA,KADM,QACNA,KADM,EAENC,OAFM,QAENA,OAFM,EAGNC,OAHM,QAGNA,OAHM,EAINC,OAJM,QAINA,OAJM,EAKNC,GALM,QAKNA,GALM,EAMNC,eANM,QAMNA,eANM;AAWN;AACMC,YAAAA,UAZA,GAYa,4BAAiBP,QAAjB,EAA2B;AAAA,qBAAMQ,KAAN;AAAA,aAA3B,EAAwC;AAC1DP,cAAAA,KAAK,EAALA,KAD0D;AAE1DC,cAAAA,OAAO,EAAPA;AAF0D,aAAxC,CAZb,EAiBN;AACA;AACA;;AACMO,YAAAA,YApBA,GAoBeH,eAAe,GAAGA,eAAe,CAAC;AACtDJ,cAAAA,OAAO,EAAPA,OADsD;AAEtDC,cAAAA,OAAO,EAAPA,OAFsD;AAGtDC,cAAAA,OAAO,EAAPA;AAHsD,aAAD,CAAlB,GAI/B,EAxBC,EA0BN;;AACAI,YAAAA,KAAK,GAAG,uBAAYR,QAAZ,EAAsBS,YAAtB,EAAoC;AAAA,qBAAM,uCAAsBJ,GAAtB,CAAN;AAAA,aAApC,EAAsEE,UAAtE,EAAkF;AACzFG,cAAAA,SAAS,EAAE,mBAAAC,IAAI;AAAA,uBAAIT,OAAO,CAACS,IAAD,CAAX;AAAA,eAD0E;AAEzFC,cAAAA,MAAM,EAAE;AAFiF,aAAlF,CAAR;AA3BM,6CAgCC;AACNJ,cAAAA,KAAK,EAALA,KADM;AAENK,cAAAA,kBAAkB,EAAE;AAAA,uBAAMA,mBAAkB,CAACL,KAAD,EAAQR,QAAR,CAAxB;AAAA,eAFd;AAGNE,cAAAA,OAAO,EAAEK,UAAU,CAACO;AAHd,aAhCD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuCP,SAASD,mBAAT,CAA4BL,KAA5B,EAAmCR,QAAnC,EAA6C;AAC5C,MAAIe,IAAI,GAAG,EAAX,CAD4C,CAG5C;;AACA,MAAIf,QAAQ,CAACgB,UAAb,EAAyB;AACxBD,IAAAA,IAAI,sBAAeE,uBAAf,cAAJ;AACA,GAN2C,CAQ5C;AACA;AACA;AACA;;;AACAF,EAAAA,IAAI,cAAJ;AACAA,EAAAA,IAAI,+CAAyCG,IAAI,CAACC,SAAL,CAAe,6BAAkBX,KAAK,CAACY,QAAN,EAAlB,CAAf,CAAzC,SAAiGpB,QAAQ,CAACgB,UAAT,GAAsB,mBAAtB,GAA4C,EAA7I,MAAJ;AACAD,EAAAA,IAAI,eAAJ;AAEA,SAAOA,IAAP;AACA,C,CAED;AACA;AACA;AACA;;;AACA,IAAME,uBAAuB,2HAGUI,2BAHV,qFAA7B,C,CAUA;AACA;AACA;AAEA;;AACA,IAAIJ,uBAAuB,CAACK,OAAxB,CAAgC,GAAhC,MAAyC,CAAC,CAA9C,EAAiD;AAChD,QAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACA","sourcesContent":["import { ISO_date_regexp } from '../../parseDates'\r\nimport { safeJsonStringify } from '../../server/html'\r\nimport createStore from '../store'\r\nimport createHttpClient from '../HttpClient'\r\nimport createHistoryProtocol from '../../router/server/createHistoryProtocol'\r\n\r\nexport async function initialize(settings, {\r\n\tproxy,\r\n\tcookies,\r\n\theaders,\r\n\tlocales,\r\n\turl,\r\n\tgetInitialState\r\n}) {\r\n\t// Redux store\r\n\tlet store\r\n\r\n\t// Create HTTP client (Redux action creator `http` utility)\r\n\tconst httpClient = createHttpClient(settings, () => store, {\r\n\t\tproxy,\r\n\t\tcookies\r\n\t})\r\n\r\n\t// Initial Redux state.\r\n\t// `User-Agent` and `Accept-Language` headers were requested:\r\n\t// https://github.com/catamphetamine/react-website/issues/72\r\n\tconst initialState = getInitialState ? getInitialState({\r\n\t\tcookies,\r\n\t\theaders,\r\n\t\tlocales\r\n\t}) : {}\r\n\r\n\t// Create Redux store.\r\n\tstore = createStore(settings, initialState, () => createHistoryProtocol(url), httpClient, {\r\n\t\tgetCookie: name => cookies[name],\r\n\t\tserver: true\r\n\t})\r\n\r\n\treturn {\r\n\t\tstore,\r\n\t\tgenerateJavascript: () => generateJavascript(store, settings),\r\n\t\tcookies: httpClient.cookiesSetOnServer\r\n\t}\r\n}\r\n\r\nfunction generateJavascript(store, settings) {\r\n\tlet code = ''\r\n\r\n\t// JSON Date deserializer\r\n\tif (settings.parseDates) {\r\n\t\tcode += `<script>${DEFINE_JSON_DATE_PARSER}</script>`\r\n\t}\r\n\r\n\t// Store data will be reloaded into the store on the client-side.\r\n\t// All forward slashes are escaped to prevent XSS attacks.\r\n\t// Another solution would be replacing with `\\uxxxx` sequences.\r\n\t// https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0\r\n\tcode += `<script>`\r\n\tcode += `window._redux_state = JSON.parse(${ JSON.stringify(safeJsonStringify(store.getState())) }${ settings.parseDates ? ', JSON.dateParser' : '' })`\r\n\tcode += `</script>`\r\n\r\n\treturn code\r\n}\r\n\r\n// JSON date deserializer.\r\n// Use as the second, 'reviver' argument to `JSON.parse(json, JSON.dateParser)`.\r\n// http://stackoverflow.com/questions/14488745/javascript-json-date-deserialization/23691273#23691273\r\n// `JSON.parse(json, JSON.dateParser)` is about 2.5 times slower than `JSON.parse(json)` in Chrome.\r\nconst DEFINE_JSON_DATE_PARSER = `\r\nif (!JSON.dateParser) {\r\n\tJSON.dateParser = function(key, value) {\r\n\t\tif (typeof value === 'string' && /^${ISO_date_regexp}$/.test(value)) {\r\n\t\t\treturn new Date(value)\r\n\t\t}\r\n\t\treturn value\r\n\t}\r\n}`\r\n\r\n// Since version 6.x, `terser` no longer provides a synchronous `minify()` function.\r\n// import Terser from 'terser'\r\n// DEFINE_JSON_DATE_PARSER = Terser.minify(DEFINE_JSON_DATE_PARSER).code\r\n\r\n// Just to be extra safe from XSS attacks\r\nif (DEFINE_JSON_DATE_PARSER.indexOf('<') !== -1) {\r\n\tthrow new Error('JSON Date parser XSS vulnerability detected')\r\n}"],"file":"server.js"}