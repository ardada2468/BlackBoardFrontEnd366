"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createRouterElement;

var _react = _interopRequireDefault(require("react"));

var _createConnectedRouter = _interopRequireDefault(require("found/createConnectedRouter"));

var _resolver = _interopRequireDefault(require("found/resolver"));

var _foundScroll = require("found-scroll");

var _render2 = _interopRequireDefault(require("../render"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function createRouterElement(renderArgs, _ref) {
  var dispatch = _ref.dispatch,
      getState = _ref.getState;
  var ConnectedRouter = (0, _createConnectedRouter["default"])({
    render: function render(renderArgs) {
      // Force re-mount the last route component on location path change.
      // https://github.com/4Catalyzer/found/issues/199#issuecomment-415616836
      var elements = renderArgs.elements;

      if (elements && window.reactPagesRemountOnNavigate !== false) {
        elements[elements.length - 1] = _react["default"].cloneElement(elements[elements.length - 1], {
          key: renderArgs.location.pathname
        });
      }

      return _react["default"].createElement(_foundScroll.ScrollManager, {
        renderArgs: renderArgs
      }, (0, _render2["default"])(renderArgs));
    }
  });
  return _react["default"].createElement(ConnectedRouter, {
    matchContext: {
      dispatch: dispatch,
      getState: getState
    },
    resolver: _resolver["default"],
    initialRenderArgs: renderArgs
  });
}
//# sourceMappingURL=createRouterElement.js.map