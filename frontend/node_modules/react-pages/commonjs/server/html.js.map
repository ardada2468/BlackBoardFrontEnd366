{"version":3,"sources":["../../source/server/html.js"],"names":["nunjucks","configure","autoescape","renderBeforeContent","assets","locale","meta","head","bodyStart","TEMPLATE_BEFORE_CONTENT","render","icon","stylesheetUrls","entries","map","entry","styles","filter","url","renderAfterContent","serverSideRender","contentNotRendered","locales","javascript","bodyEnd","TEMPLATE_AFTER_CONTENT","javascriptUrls","safeJsonStringify","json","JSON","stringify","replace","compile"],"mappings":";;;;;;;;;;;AAAA;;AAEAA,qBAASC,SAAT,CAAmB;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAAnB;;AAEO,SAASC,mBAAT,OAOP;AAAA,MANCC,MAMD,QANCA,MAMD;AAAA,MALCC,MAKD,QALCA,MAKD;AAAA,MAJCC,IAID,QAJCA,IAID;AAAA,MAHCC,IAGD,QAHCA,IAGD;AAAA,MAFCC,SAED,QAFCA,SAED;AACC,SAAOC,uBAAuB,CAACC,MAAxB,CACN;AACAC,IAAAA,IAAI,EAAEP,MAAM,CAACO,IADb;AAEAC,IAAAA,cAAc,EAAER,MAAM,CAACS,OAAP,CAAeC,GAAf,CAAmB,UAAAC,KAAK;AAAA,aAAIX,MAAM,CAACY,MAAP,IAAiBZ,MAAM,CAACY,MAAP,CAAcD,KAAd,CAArB;AAAA,KAAxB,EAAmEE,MAAnE,CAA0E,UAAAC,GAAG;AAAA,aAAIA,GAAJ;AAAA,KAA7E,CAFhB;AAGAb,IAAAA,MAAM,EAANA,MAHA;AAIAC,IAAAA,IAAI,EAAJA,IAJA;AAKAC,IAAAA,IAAI,EAAJA,IALA;AAMAC,IAAAA,SAAS,EAATA;AANA,GADM,CAAP;AASA;;AAEM,SAASW,kBAAT,QAQP;AAAA,MAPCf,MAOD,SAPCA,MAOD;AAAA,MANCgB,gBAMD,SANCA,gBAMD;AAAA,MALCC,kBAKD,SALCA,kBAKD;AAAA,MAJCC,OAID,SAJCA,OAID;AAAA,MAHCC,UAGD,SAHCA,UAGD;AAAA,MAFCC,OAED,SAFCA,OAED;AACC,SAAOC,sBAAsB,CAACf,MAAvB,CACN;AACAgB,IAAAA,cAAc,EAAEtB,MAAM,CAACS,OAAP,CAAeC,GAAf,CAAmB,UAAAC,KAAK;AAAA,aAAIX,MAAM,CAACmB,UAAP,IAAqBnB,MAAM,CAACmB,UAAP,CAAkBR,KAAlB,CAAzB;AAAA,KAAxB,EAA2EE,MAA3E,CAAkF,UAAAC,GAAG;AAAA,aAAIA,GAAJ;AAAA,KAArF,CADhB;AAEAE,IAAAA,gBAAgB,EAAhBA,gBAFA;AAGAC,IAAAA,kBAAkB,EAAlBA,kBAHA;AAIAC,IAAAA,OAAO,EAAPA,OAJA;AAKAC,IAAAA,UAAU,EAAVA,UALA;AAMAC,IAAAA,OAAO,EAAPA,OANA;AAOAG,IAAAA,iBAAiB,EAAjBA;AAPA,GADM,CAAP;AAUA;;AAEM,SAASA,iBAAT,CAA2BC,IAA3B,EACP;AACC;AACA;AACA;AACA;AACA;AACA,SAAOC,IAAI,CAACC,SAAL,CAAeF,IAAf,EAAqBG,OAArB,CAA6B,KAA7B,EAAoC,KAApC,CAAP;AACA;;AAED,IAAMtB,uBAAuB,GAAGT,qBAASgC,OAAT,CAC/B,u8BAmCAD,OAnCA,CAmCQ,KAnCR,EAmCe,EAnCf,CAD+B,CAAhC;;AAsCA,IAAMN,sBAAsB,GAAGzB,qBAASgC,OAAT,CAC9B,0kDA6CAD,OA7CA,CA6CQ,KA7CR,EA6Ce,EA7Cf,CAD8B,CAA/B","sourcesContent":["import nunjucks from 'nunjucks'\r\n\r\nnunjucks.configure({ autoescape: true })\r\n\r\nexport function renderBeforeContent({\r\n\tassets,\r\n\tlocale,\r\n\tmeta,\r\n\thead,\r\n\tbodyStart\r\n})\r\n{\r\n\treturn TEMPLATE_BEFORE_CONTENT.render\r\n\t({\r\n\t\ticon: assets.icon,\r\n\t\tstylesheetUrls: assets.entries.map(entry => assets.styles && assets.styles[entry]).filter(url => url),\r\n\t\tlocale,\r\n\t\tmeta,\r\n\t\thead,\r\n\t\tbodyStart\r\n\t})\r\n}\r\n\r\nexport function renderAfterContent({\r\n\tassets,\r\n\tserverSideRender,\r\n\tcontentNotRendered,\r\n\tlocales,\r\n\tjavascript,\r\n\tbodyEnd\r\n})\r\n{\r\n\treturn TEMPLATE_AFTER_CONTENT.render\r\n\t({\r\n\t\tjavascriptUrls: assets.entries.map(entry => assets.javascript && assets.javascript[entry]).filter(url => url),\r\n\t\tserverSideRender,\r\n\t\tcontentNotRendered,\r\n\t\tlocales,\r\n\t\tjavascript,\r\n\t\tbodyEnd,\r\n\t\tsafeJsonStringify\r\n\t})\r\n}\r\n\r\nexport function safeJsonStringify(json)\r\n{\r\n\t// The default javascript JSON.stringify doesn't escape forward slashes,\r\n\t// but it is allowed by the JSON specification, so we manually do it here.\r\n\t// (and javascript regular expressions don't support \"negative lookbehind\"\r\n\t//  so it's simply replacing all forward slashes with escaped ones,\r\n\t//  but also make sure to not call it twice on the same JSON)\r\n\treturn JSON.stringify(json).replace(/\\//g, '\\\\/')\r\n}\r\n\r\nconst TEMPLATE_BEFORE_CONTENT = nunjucks.compile\r\n(`\r\n\t<!doctype html>\r\n\t<html {% if locale %} lang=\"{{locale}}\" {% endif %}>\r\n\t\t<head>\r\n\t\t\t{# <title/> and <meta/> tags, properly escaped #}\r\n\t\t\t{{ meta | safe }}\r\n\r\n\t\t\t{#\r\n\t\t\t\t(will be done only in production mode\r\n\t\t\t\t with webpack extract text plugin)\r\n\t\t\t\tMount CSS stylesheets for all entry points (e.g. \"main\")\r\n\t\t\t#}\r\n\t\t\t{% for style_url in stylesheetUrls %}\r\n\t\t\t\t<link\r\n\t\t\t\t\thref=\"{{ style_url | safe }}\"\r\n\t\t\t\t\trel=\"stylesheet\"\r\n\t\t\t\t\ttype=\"text/css\"\r\n\t\t\t\t\tcharset=\"UTF-8\"/>\r\n\t\t\t{% endfor %}\r\n\r\n\t\t\t{# Custom <head/> markup #}\r\n\t\t\t{{ head | safe }}\r\n\r\n\t\t\t{# Site icon #}\r\n\t\t\t{% if icon %}\r\n\t\t\t\t<link rel=\"shortcut icon\" href=\"{{ icon | safe }}\"/>\r\n\t\t\t{% endif %}\r\n\t\t</head>\r\n\r\n\t\t<body>\r\n\t\t\t{# Supports adding arbitrary markup to <body/> start #}\r\n\t\t\t{{ bodyStart | safe }}\r\n\r\n\t\t\t{# React page content. #}\r\n\t\t\t<div id=\"react\" class=\"react--loading\">`\r\n.replace(/\\t/g, ''))\r\n\r\nconst TEMPLATE_AFTER_CONTENT = nunjucks.compile\r\n(`</div>\r\n\r\n\t\t\t{% if serverSideRender %}\r\n\t\t\t\t{#\r\n\t\t\t\t\tServer-Side Rendering \"renderContent\" flag.\r\n\t\t\t\t\tIt is used to determine whether to call\r\n\t\t\t\t\t\"ReactDOM.hydrate()\" or \"ReactDOM.render()\".\r\n\t\t\t\t#}\r\n\t\t\t\t<script>\r\n\t\t\t\t\t{# If renaming this variable don't reset it in \"./redux/client/setUpAndRender.js\" #}\r\n\t\t\t\t\twindow._server_side_render = true\r\n\t\t\t\t\t{% if contentNotRendered %}\r\n\t\t\t\t\t\t{# If renaming this variable don't reset it in \"./redux/client/setUpAndRender.js\" #}\r\n\t\t\t\t\t\twindow._empty_server_side_render = true\r\n\t\t\t\t\t{% endif %}\r\n\t\t\t\t</script>\r\n\r\n\t\t\t\t{# User's preferred locales (based on the \"Accept-Locale\" HTTP request header). #}\r\n\t\t\t\t{% if locales %}\r\n\t\t\t\t\t<script>\r\n\t\t\t\t\t\t{# If renaming this variable don't reset it in \"./redux/client/setUpAndRender.js\" #}\r\n\t\t\t\t\t\twindow._react_pages_locales = {{ safeJsonStringify(locales) | safe }}\r\n\t\t\t\t\t</script>\r\n\t\t\t\t{% endif %}\r\n\r\n\t\t\t\t{# Custom javascript. Must be XSS-safe. #}\r\n\t\t\t\t{# e.g. Redux stuff goes here (Redux state, Date parser) #}\r\n\t\t\t\t{% if javascript %}\r\n\t\t\t\t\t{{ javascript | safe }}\r\n\t\t\t\t{% endif %}\r\n\t\t\t{% endif %}\r\n\r\n\t\t\t{#\r\n\t\t\t\tInclude all required \"entry\" points javascript\r\n\t\t\t\t(e.g. \"common\", \"main\")\r\n\t\t\t#}\r\n\t\t\t{% for javascript_url in javascriptUrls %}\r\n\t\t\t\t<script src=\"{{ javascript_url | safe }}\" charset=\"UTF-8\"></script>\r\n\t\t\t{% endfor %}\r\n\r\n\t\t\t{# Supports adding arbitrary markup to <body/> end #}\r\n\t\t\t{{ bodyEnd | safe }}\r\n\t\t</body>\r\n\t</html>\r\n`\r\n.replace(/\\t/g, ''))"],"file":"html.js"}