{"version":3,"sources":["../../source/static-site-generator/walk.js"],"names":["walk","dir","Promise","resolve","reject","fs","readdir","error","files","all","map","file","filepath","path","join","stat","stats","isDirectory","then","isFile","foldersContents","reduce","folderContents","concat"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;;;AAIe,SAASA,IAAT,CAAcC,GAAd,EAAmB;AAChC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,mBAAGC,OAAH,CAAWL,GAAX,EAAgB,UAACM,KAAD,EAAQC,KAAR,EAAkB;AAChC,UAAID,KAAJ,EAAW;AACT,eAAOH,MAAM,CAACG,KAAD,CAAb;AACD;;AACDL,MAAAA,OAAO,CAACO,GAAR,CAAYD,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD,EAAU;AAC9B,eAAO,IAAIT,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAMQ,QAAQ,GAAGC,iBAAKC,IAAL,CAAUb,GAAV,EAAeU,IAAf,CAAjB;;AACAN,yBAAGU,IAAH,CAAQH,QAAR,EAAkB,UAACL,KAAD,EAAQS,KAAR,EAAkB;AAClC,gBAAIT,KAAJ,EAAW;AACT,qBAAOH,MAAM,CAACG,KAAD,CAAb;AACD;;AACD,gBAAIS,KAAK,CAACC,WAAN,EAAJ,EAAyB;AACvBjB,cAAAA,IAAI,CAACY,QAAD,CAAJ,CAAeM,IAAf,CAAoBf,OAApB;AACD,aAFD,MAEO,IAAIa,KAAK,CAACG,MAAN,EAAJ,EAAoB;AACzBhB,cAAAA,OAAO,CAACS,QAAD,CAAP;AACD;AACF,WATD;AAUD,SAZM,CAAP;AAaD,OAdW,CAAZ,EAeCM,IAfD,CAeM,UAACE,eAAD,EAAqB;AACzBjB,QAAAA,OAAO,CAACiB,eAAe,CAACC,MAAhB,CAAuB,UAACZ,GAAD,EAAMa,cAAN;AAAA,iBAAyBb,GAAG,CAACc,MAAJ,CAAWD,cAAX,CAAzB;AAAA,SAAvB,EAA4E,EAA5E,CAAD,CAAP;AACD,OAjBD;AAkBD,KAtBD;AAuBD,GAxBM,CAAP;AAyBD","sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\n\r\n/**\r\n * Returns the paths to all files in a directory.\r\n * (walks the subdirectory tree recursively).\r\n */\r\nexport default function walk(dir) {\r\n  return new Promise((resolve, reject) => {\r\n    fs.readdir(dir, (error, files) => {\r\n      if (error) {\r\n        return reject(error);\r\n      }\r\n      Promise.all(files.map((file) => {\r\n        return new Promise((resolve, reject) => {\r\n          const filepath = path.join(dir, file);\r\n          fs.stat(filepath, (error, stats) => {\r\n            if (error) {\r\n              return reject(error);\r\n            }\r\n            if (stats.isDirectory()) {\r\n              walk(filepath).then(resolve);\r\n            } else if (stats.isFile()) {\r\n              resolve(filepath);\r\n            }\r\n          });\r\n        });\r\n      }))\r\n      .then((foldersContents) => {\r\n        resolve(foldersContents.reduce((all, folderContents) => all.concat(folderContents), []));\r\n      });\r\n    });\r\n  });\r\n}"],"file":"walk.js"}