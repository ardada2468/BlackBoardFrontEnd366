{"version":3,"sources":["../../source/meta/meta.js"],"names":["browserDocument","BrowserDocument","DEFAULT_META","charset","viewport","META_METHOD_NAME","meta","getMeta","Component","mergeMeta","reduce","componentMeta","locale","locales","filter","_","length","getComponentsMeta","components","state","map","dropUndefinedProperties","getCodeSplitMeta","routes","updateMeta","document","title","normalizeMeta","meta_tags","getMetaTags","getTitle","setTitle","updateMetaTag","new_meta_tags","key","value","forEach","removeMetaTag","addMetaTag","generateMetaTagsMarkup","escapeHTML","concat","generateMetaTagMarkup","name","String","getMetaKeyAliases","i","meta_tag","isMetaTag","getMetaTagValue","setMetaTagValue","splice","string","replace","normalizeMetaKeys","Object","keys","all","alias","push","convertMeta","object","undefined","newObject","Array","isArray","keyValue","expandArrays","expandObjects","convertOpenGraphLocaleToLanguageTag","ogLocale"],"mappings":"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","sourcesContent":["import flatten from 'lodash/flatten'\r\nimport compact from 'lodash/compact'\r\n\r\nimport BrowserDocument, { getMetaAttributeFor } from './BrowserDocument'\r\n\r\nconst browserDocument = new BrowserDocument()\r\n\r\nconst DEFAULT_META = {\r\n\tcharset: 'utf-8',\r\n\t// Fixes CSS screen width on mobile devices.\r\n\t// Otherwise media queries would not be applied initially\r\n\t// and it would show desktop version design.\r\n\t// Also, for `/react-pages-base` page this meta tag\r\n\t// needs to be present in markup as the default one\r\n\t// because `/react-pages-base` page doesn't collect\r\n\t// meta from page components.\r\n\tviewport: 'width=device-width, initial-scale=1.0'\r\n}\r\n\r\nconst META_METHOD_NAME = 'meta'\r\n\r\n/**\r\n * (This decorator is deprecated, set static `meta` property on a page component instead)\r\n * `@meta()` decorator used for adding `<title/>` and <meta/>` tags to a React page.\r\n * @param  {function} getMeta - A function of `state` returning this page's meta object.\r\n * @example\r\n * @meta(({ state }) => ({ title: `${state.user.name}'s profile` }))\r\n */\r\nexport default function meta(getMeta) {\r\n\treturn function(Component) {\r\n\t\tComponent[META_METHOD_NAME] = getMeta\r\n\t\treturn Component\r\n\t}\r\n}\r\n\r\n/**\r\n * Gathers `<title/>` and `<meta/>` tags (inside `<head/>`)\r\n * defined for this route (`components` array).\r\n * @param {object[]} meta â€” An array of meta objects.\r\n * @return {object}\r\n */\r\nexport function mergeMeta(meta) {\r\n\t// // `Object.assign` is not supported in Internet Explorer.\r\n\t// return Object.assign({}, DEFAULT_META, ...)\r\n\r\n\tmeta = meta.reduce((meta, componentMeta) => ({\r\n\t\t...meta,\r\n\t\t...componentMeta\r\n\t}),\r\n\t{ ...DEFAULT_META })\r\n\r\n\t// Remove `locale` from `locales`.\r\n\tif (meta.locale && meta.locales) {\r\n\t\tmeta.locales = meta.locales.filter(_ => _ !== meta.locale)\r\n\t\tif (meta.locales.length === 0) {\r\n\t\t\tdelete meta.locales\r\n\t\t}\r\n\t}\r\n\r\n\treturn meta\r\n}\r\n\r\n/**\r\n * Gets `React.Component` chain meta.\r\n * @return {object[]}\r\n */\r\nexport function getComponentsMeta(components, state) {\r\n\treturn components\r\n\t\t// `.filter(_ => _)` here just in case someone forgets to set\r\n\t\t// `codeSplit: true` for routes with `getComponent`.\r\n\t\t.filter(_ => _)\r\n\t\t.map(_ => _[META_METHOD_NAME])\r\n\t\t.filter(_ => _)\r\n\t\t// Convert objects to functions\r\n\t\t.map(_ => typeof _ === 'object' ? () => _ : _)\r\n\t\t.map(_ => dropUndefinedProperties(_(state)))\r\n}\r\n\r\n/**\r\n * Gathers `meta` from routes chain.\r\n * Meta could have been provided via the standard static `meta` property instead\r\n * but `found` router doesn't provide the actual React Components for routes\r\n * which are resolved through `getComponent` so there's currently no way\r\n * of getting the actual Route component classes, hence the `meta` property workaround.\r\n *\r\n * @return {object[]}\r\n */\r\nexport function getCodeSplitMeta(routes, state) {\r\n\treturn routes\r\n\t\t.map(_ => _.meta)\r\n\t\t.filter(_ => _)\r\n\t\t.map(_ => dropUndefinedProperties(_(state)))\r\n}\r\n\r\n/**\r\n * Updates `<title/>` and `<meta/>` tags (inside `<head/>`).\r\n */\r\nexport function updateMeta(meta, document = browserDocument) {\r\n\tconst { title, charset } = meta\r\n\tmeta = normalizeMeta(meta)\r\n\r\n\t// Get all `<meta/>` tags.\r\n\t// (will be mutated)\r\n\tconst meta_tags = document.getMetaTags()\r\n\r\n\t// Update `<title/>`.\r\n\tif (title && document.getTitle() !== title) {\r\n\t\tdocument.setTitle(title)\r\n\t}\r\n\r\n\t// Update `<meta charset/>`.\r\n\tif (charset) {\r\n\t\tupdateMetaTag(document, meta_tags, 'charset', charset)\r\n\t}\r\n\r\n\t// Update existing `<meta/>` tags.\r\n\t// (removing them from `meta_tags` array)\r\n\tconst new_meta_tags = compact(\r\n\t\tmeta.map(([key, value]) => {\r\n\t\t\tif (!updateMetaTag(document, meta_tags, key, value)) {\r\n\t\t\t\treturn [key, value]\r\n\t\t\t}\r\n\t\t})\r\n\t)\r\n\r\n\t// Delete no longer existent `<meta/>` tags.\r\n\tmeta_tags.forEach(document.removeMetaTag)\r\n\r\n\t// Create new `<meta/>` tags.\r\n\tfor (const [key, value] of new_meta_tags) {\r\n\t\tdocument.addMetaTag(key, value)\r\n\t}\r\n}\r\n\r\n/**\r\n * Generates a list of `<title/>` and `<meta/>` tags markup.\r\n * @param  {object[]} meta\r\n * @return {string[]}\r\n */\r\nexport function generateMetaTagsMarkup(meta) {\r\n\tconst { title, charset } = meta\r\n\tmeta = normalizeMeta(meta)\r\n\r\n\treturn [\r\n\t\t// `<meta charset/>` should always come first\r\n\t\t// because some browsers only read the first\r\n\t\t// 1024 bytes when deciding on page encoding.\r\n\t\t// (`<meta charset/>` is always present)\r\n\t\t`<meta charset=\"${escapeHTML(charset || DEFAULT_META.charset)}\"/>`,\r\n\t\t`<title>${escapeHTML(title || '')}</title>`\r\n\t]\r\n\t.concat(\r\n\t\tmeta.map(([key, value]) => generateMetaTagMarkup(key, value))\r\n\t)\r\n}\r\n\r\n/**\r\n * Generates `<meta/>` tag HTML markup.\r\n * @param {string} key\r\n * @param {string} value\r\n * @return {string}\r\n */\r\nfunction generateMetaTagMarkup(name, value) {\r\n\tif (typeof value === 'boolean' || typeof value === 'number') {\r\n\t\tvalue = String(value)\r\n\t} else {\r\n\t\tvalue = escapeHTML(String(value))\r\n\t}\r\n\treturn `<meta ${getMetaAttributeFor(name)}=\"${name}\" content=\"${value}\"/>`\r\n}\r\n\r\n/**\r\n * Gets `<meta/>` property aliases.\r\n * (for both `name` and `property`).\r\n * Also filters out `charset`.\r\n * @return {string}\r\n */\r\nfunction getMetaKeyAliases(key) {\r\n\tswitch (key)\r\n\t{\r\n\t\t// `<meta charset/>` is handled specially\r\n\t\t// because it doesn't have `name` attribute.\r\n\t\tcase 'charset':\r\n\t\t\treturn []\r\n\t\t// `<meta name=\"description\"/>` is an older and\r\n\t\t// more widely supported form than \"og:description\".\r\n\t\t// In practice there's no need to duplicate\r\n\t\t// `<meta name=\"description\"/>` as \"og:description\".\r\n\t\t// Still, to keep it fully-OpenGraph-compliant\r\n\t\t// the description is duplicated as \"og:description\" here.\r\n\t\t// https://indieweb.org/The-Open-Graph-protocol#How_to_set_description\r\n\t\tcase 'description':\r\n\t\t\treturn [key, `og:${key}`]\r\n\t\tcase 'siteName':\r\n\t\t\treturn [`og:site_name`]\r\n\t\tcase 'site_name':\r\n\t\t// `title` property of `meta` object is\r\n\t\t// handled specially via a `<title/>` tag.\r\n\t\t// There would be no need to add `og:title`\r\n\t\t// which duplicates the existing `<title/>`,\r\n\t\t// and `title` property could be discarded here.\r\n\t\t// For example, Facebook falls back to `<title/>` tag.\r\n\t\t// Still, OpenGraph specs formally require an `og:title`.\r\n\t\t// So, to keep it fully-OpenGraph-compliant\r\n\t\t// the title is duplicated as \"og:title\" here.\r\n\t\t// https://indieweb.org/The-Open-Graph-protocol#How_to_set_title\r\n\t\tcase 'title':\r\n\t\t// SVG images are not supported (boo).\r\n\t\t// https://indieweb.org/The-Open-Graph-protocol#How_to_set_image\r\n\t\tcase 'image':\r\n\t\tcase 'locale':\r\n\t\tcase 'type':\r\n\t\tcase 'url':\r\n\t\tcase 'audio':\r\n\t\tcase 'video':\r\n\t\t\treturn [`og:${key}`]\r\n\t\tcase 'locales':\r\n\t\t\treturn ['og:locale:alternate']\r\n\t\tdefault:\r\n\t\t\treturn [escapeHTML(key)]\r\n\t}\r\n}\r\n\r\n/**\r\n * Updates `<meta/>` tag to a new `value` and removes it from `meta_tags`.\r\n * @param {Document} document - `BrowserDocument` or `TestDocument`.\r\n * @return {boolean?}\r\n */\r\nfunction updateMetaTag(document, meta_tags, name, value) {\r\n\tlet i = 0\r\n\twhile (i < meta_tags.length) {\r\n\t\tconst meta_tag = meta_tags[i]\r\n\t\tif (document.isMetaTag(meta_tag, name)) {\r\n\t\t\t// Update `<meta/>` tag `value`.\r\n\t\t\tif (document.getMetaTagValue(meta_tag) !== value) {\r\n\t\t\t\tdocument.setMetaTagValue(meta_tag, value)\r\n\t\t\t}\r\n\t\t\t// Remove it from `meta_tags`.\r\n\t\t\tmeta_tags.splice(i, 1)\r\n\t\t\t// Updated.\r\n\t\t\treturn true\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}\r\n\r\n/**\r\n * Escapes a string so that it's kinda safe to insert into HTML.\r\n * @return {string}\r\n */\r\nfunction escapeHTML(string) {\r\n\treturn string && string\r\n\t\t.replace('&', '&amp;')\r\n\t\t.replace('<', '&lt;')\r\n\t\t.replace('>', '&gt;')\r\n\t\t.replace('\"', '&quot;')\r\n\t\t.replace('\\'', '&#x27;')\r\n\t\t.replace('/', '&#x2F;')\r\n}\r\n\r\n/**\r\n * Transforms meta object having \"keys\"\r\n * into a meta object having the actual\r\n * `<meta/>` tag `name`s and `property`es.\r\n * @return Array of arrays having shape `[key, value]`.\r\n */\r\nfunction normalizeMetaKeys(meta) {\r\n\treturn Object.keys(meta).reduce((all, key) => {\r\n\t\tfor (const alias of getMetaKeyAliases(key)) {\r\n\t\t\tall.push([alias, meta[key]])\r\n\t\t}\r\n\t\treturn all\r\n\t}, [])\r\n}\r\n\r\nfunction normalizeMeta(meta) {\r\n\treturn convertMeta(normalizeMetaKeys(meta))\r\n}\r\n\r\nfunction dropUndefinedProperties(object) {\r\n\tconst keys = Object.keys(object)\r\n\tfor (const key of keys) {\r\n\t\tif (object[key] === undefined) {\r\n\t\t\treturn keys.reduce((newObject, key) => {\r\n\t\t\t\tif (object[key] !== undefined) {\r\n\t\t\t\t\tnewObject[key] = object[key]\r\n\t\t\t\t}\r\n\t\t\t\treturn newObject\r\n\t\t\t},\r\n\t\t\t{})\r\n\t\t}\r\n\t}\r\n\treturn object\r\n}\r\n\r\n// Expands nested objects.\r\n// Expands arrays.\r\n// @param meta â€” Either an object or an array of arrays having shape `[key, value]`.\r\n// @return An array of arrays having shape `[key, value]`.\r\nexport function convertMeta(meta) {\r\n\t// Convert meta object to an array of arrays having shape `[key, value]`.\r\n\tif (!Array.isArray(meta)) {\r\n\t\tmeta = Object.keys(meta).map(key => [key, meta[key]])\r\n\t}\r\n\treturn flatten(\r\n\t\tmeta.map((keyValue) => {\r\n\t\t\treturn flatten(\r\n\t\t\t\texpandArrays(keyValue)\r\n\t\t\t\t\t.map(expandObjects)\r\n\t\t\t)\r\n\t\t})\r\n\t)\r\n}\r\n\r\n// There can be arrays of properties.\r\n// For example:\r\n// <meta property=\"og:image\" content=\"//example.com/image.jpg\" />\r\n// <meta property=\"og:image:width\" content=\"100\" />\r\n// <meta property=\"og:image:height\" content=\"100\" />\r\n// <meta property=\"og:image\" content=\"//example.com/image@2x.jpg\" />\r\n// <meta property=\"og:image:width\" content=\"200\" />\r\n// <meta property=\"og:image:height\" content=\"200\" />\r\nexport function expandArrays(meta) {\r\n\tif (Array.isArray(meta[1])) {\r\n\t\treturn meta[1].map(value => [meta[0], value])\r\n\t}\r\n\treturn [meta]\r\n}\r\n\r\n// If `value` is an object\r\n// then expand such object\r\n// prefixing property names.\r\nexport function expandObjects(meta) {\r\n\tif (typeof meta[1] === 'object') {\r\n\t\treturn flatten(\r\n\t\t\tObject.keys(meta[1])\r\n\t\t\t\t.map((key) => [\r\n\t\t\t\t\tkey === '_' ? meta[0] : `${meta[0]}:${key}`,\r\n\t\t\t\t\tmeta[1][key]\r\n\t\t\t\t])\r\n\t\t\t\t// Expand objects recursively.\r\n\t\t\t\t.map(expandObjects)\r\n\t\t)\r\n\t}\r\n\treturn [meta]\r\n}\r\n\r\nexport function convertOpenGraphLocaleToLanguageTag(ogLocale) {\r\n\treturn ogLocale.replace('_', '-')\r\n}"],"file":"meta.js"}