{"version":3,"sources":["../source/HttpClient.js"],"names":["HTTP_METHODS","HttpClient","options","proxy","headers","cookies","authTokenHeader","onBeforeSend","catchToRetry","getAuthToken","shouldParseJsonDates","parseDates","transformUrl","proxyUrl","bind","server","getCookie","name","cookiesSetOnServer","cookieRaw","indexOf","key","value","_getCookie","agent","superagent","method","originalUrl","data","url","retryCount","performHttpRequest","request","HttpRequest","onResponseHeaders","onAddCookies","cookie","push","addAuthenticationToken","authentication","isRelativeUrl","addCookies","progress","send","then","response","error","http","protocol","secure","host","port"],"mappings":"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","sourcesContent":["import superagent from 'superagent'\r\n\r\nimport { starts_with } from './helpers'\r\nimport { getCookie as _getCookie } from './client/cookies'\r\nimport HttpRequest, { getCookieKeyAndValue } from './HttpRequest'\r\n\r\nconst HTTP_METHODS = [\r\n\t'get',\r\n\t'post',\r\n\t'put',\r\n\t'patch',\r\n\t'delete',\r\n\t'head',\r\n\t'options'\r\n]\r\n\r\n// This is an isomorphic (universal) HTTP client\r\n// which works both on Node.js and in the web browser,\r\n// and therefore can be used in Redux actions (for HTTP requests)\r\nexport default class HttpClient {\r\n\t// `Set-Cookie` HTTP headers\r\n\t// (in case any cookies are set)\r\n\t// cookiesSetOnServer = new Set()\r\n\tcookiesSetOnServer = []\r\n\r\n\t// Constructs a new instance of Http client.\r\n\t// Optionally takes an Http Request as a reference to mimic\r\n\t// (in this case, cookies, to make authentication work on the server-side).\r\n\tconstructor(options = {}) {\r\n\t\tconst {\r\n\t\t\tproxy,\r\n\t\t\theaders,\r\n\t\t\tcookies,\r\n\t\t\tauthTokenHeader,\r\n\t\t\tonBeforeSend,\r\n\t\t\tcatchToRetry,\r\n\t\t\tgetAuthToken\r\n\t\t} = options\r\n\r\n\t\tconst shouldParseJsonDates = options.parseDates !== false\r\n\r\n\t\tconst transformUrl = options.transformUrl || this.proxyUrl.bind(this)\r\n\r\n\t\t// Clone HTTP request cookies on the server-side\r\n\t\t// (to make authentication work)\r\n\t\tif (cookies) {\r\n\t\t\tthis.server = true\r\n\t\t}\r\n\r\n\t\tthis.proxy = proxy\r\n\r\n\t\t// \"Get cookie value by name\" helper (works both on client and server)\r\n\t\tconst getCookie = this.server\r\n\t\t?\r\n\t\t((name) => {\r\n\t\t\t// If this cookie was set dynamically then return it\r\n\t\t\tfor (const cookieRaw of this.cookiesSetOnServer) {\r\n\t\t\t\tif (cookieRaw.indexOf(`${name}=`) === 0) {\r\n\t\t\t\t\tconst [key, value] = getCookieKeyAndValue(cookieRaw)\r\n\t\t\t\t\treturn value\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Return the original request cookie\r\n\t\t\treturn cookies[name]\r\n\t\t})\r\n\t\t:\r\n\t\t_getCookie\r\n\r\n\t\t// `superagent` doesn't save cookies by default on the server side.\r\n\t\t// Therefore calling `.agent()` explicitly to enable setting cookies.\r\n\t\tconst agent = this.server ? superagent.agent() : superagent\r\n\r\n\t\t// Define HTTP methods on this `http` utility instance\r\n\t\tfor (const method of HTTP_METHODS) {\r\n\t\t\tthis[method] = (originalUrl, data, options = {}) => {\r\n\t\t\t\t// `url` will be absolute for server-side\r\n\t\t\t\tconst url = transformUrl(originalUrl, { server: this.server })\r\n\r\n\t\t\t\t// Is incremented on each retry\r\n\t\t\t\tlet retryCount = -1\r\n\r\n\t\t\t\t// Performs an HTTP request to the given `url`.\r\n\t\t\t\t// Can retry itself.\r\n\t\t\t\tconst performHttpRequest = () => {\r\n\t\t\t\t\t// Create Http request\r\n\t\t\t\t\tconst request = new HttpRequest(method, url, data, {\r\n\t\t\t\t\t\tagent,\r\n\t\t\t\t\t\tshouldParseJsonDates,\r\n\t\t\t\t\t\tonResponseHeaders: options.onResponseHeaders,\r\n\t\t\t\t\t\theaders: { ...headers, ...options.headers },\r\n\t\t\t\t\t\tonAddCookies: (cookies) => {\r\n\t\t\t\t\t\t\tif (this.server) {\r\n\t\t\t\t\t\t\t\t// Cookies will be duplicated here\r\n\t\t\t\t\t\t\t\t// because `superagent.agent()` persists\r\n\t\t\t\t\t\t\t\t// `Set-Cookie`s between subsequent requests\r\n\t\t\t\t\t\t\t\t// (i.e. for the same `HttpClient` instance).\r\n\t\t\t\t\t\t\t\t// Therefore using a `Set` instead of an array.\r\n\t\t\t\t\t\t\t\tfor (const cookie of cookies) {\r\n\t\t\t\t\t\t\t\t\t// this.cookiesSetOnServer.add(cookie)\r\n\t\t\t\t\t\t\t\t\tif (this.cookiesSetOnServer.indexOf(cookie) < 0) {\r\n\t\t\t\t\t\t\t\t\t\tthis.cookiesSetOnServer.push(cookie)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t// Sets `Authorization: Bearer ${token}` in HTTP request header\r\n\t\t\t\t\trequest.addAuthenticationToken(\r\n\t\t\t\t\t\tauthTokenHeader,\r\n\t\t\t\t\t\toptions.authentication,\r\n\t\t\t\t\t\tgetAuthToken,\r\n\t\t\t\t\t\tgetCookie,\r\n\t\t\t\t\t\turl,\r\n\t\t\t\t\t\toriginalUrl\r\n\t\t\t\t\t)\r\n\r\n\t\t\t\t\t// On server side, user's cookies are attached to **all** relative \"original\" URLs\r\n\t\t\t\t\t// so `http.transformUrl(originalUrl)` must not transform relative URLs\r\n\t\t\t\t\t// into absolute URLs, otherwise user's cookies would be leaked to a third party.\r\n\t\t\t\t\tif (this.server && isRelativeUrl(originalUrl)) {\r\n\t\t\t\t\t\trequest.addCookies(cookies, this.cookiesSetOnServer)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Allows customizing HTTP requests.\r\n\t\t\t\t\t// (for example, setting some HTTP headers,\r\n\t\t\t\t\t//  or changing HTTP request `Content-Type`).\r\n\t\t\t\t\t// https://github.com/catamphetamine/react-website/issues/73\r\n\t\t\t\t\tif (onBeforeSend) {\r\n\t\t\t\t\t\tonBeforeSend(request.request, {\r\n\t\t\t\t\t\t\turl,\r\n\t\t\t\t\t\t\toriginalUrl\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// File upload progress metering\r\n\t\t\t\t\t// https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\r\n\t\t\t\t\tif (options.progress) {\r\n\t\t\t\t\t\trequest.progress(options.progress)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn request.send().then(\r\n\t\t\t\t\t\t(response) => response,\r\n\t\t\t\t\t\t(error) => {\r\n\t\t\t\t\t\t\t// `superagent` would have already output the error to console\r\n\t\t\t\t\t\t\t// console.error(error.stack)\r\n\t\t\t\t\t\t\t// Can optionally retry an HTTP request in case of an error\r\n\t\t\t\t\t\t\t// (e.g. if a JWT access token expired and has to be refreshed using a \"refresh\" token).\r\n\t\t\t\t\t\t\t// https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/\r\n\t\t\t\t\t\t\tif (catchToRetry) {\r\n\t\t\t\t\t\t\t\tretryCount++\r\n\t\t\t\t\t\t\t\treturn catchToRetry(error, retryCount, {\r\n\t\t\t\t\t\t\t\t\tgetCookie,\r\n\t\t\t\t\t\t\t\t\thttp: this\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.then(performHttpRequest)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// HTTP request failed with an `error`\r\n\t\t\t\t\t\t\tthrow error\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn performHttpRequest()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Validates the requested URL,\r\n\t// and also prepends host and port to it on the server side.\r\n\tproxyUrl(url, { server }) {\r\n\t\t// Prepend host and port on the server side\r\n\t\tif (this.proxy && server && isRelativeUrl(url)) {\r\n\t\t\tconst protocol = this.proxy.secure ? 'https' : 'http'\r\n\t\t\treturn `${protocol}://${this.proxy.host}:${this.proxy.port || '80'}${url}`\r\n\t\t}\r\n\t\treturn url\r\n\t}\r\n}\r\n\r\nfunction isRelativeUrl(url) {\r\n\treturn starts_with(url, '/') && !starts_with(url, '//')\r\n}"],"file":"HttpClient.js"}