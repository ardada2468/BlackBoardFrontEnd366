import _reduceRightInstanceProperty from "core-js-pure/stable/instance/reduce-right.js";
import PropTypes from 'prop-types';
import React from 'react';
const propTypes = {
  elements: PropTypes.arrayOf(PropTypes.oneOfType([// This should be an object of this same type, but recursive checks would
  // probably be too messy.
  PropTypes.object, PropTypes.element, PropTypes.func])).isRequired
};

function accumulateElement(children, element) {
  if (!children) {
    return typeof element === 'function' ? element(null) : element;
  }

  if (!element) {
    return children;
  }

  if (! /*#__PURE__*/React.isValidElement(children)) {
    // Children come from named child routes.
    const groups = {};
    Object.entries(children).forEach(([groupName, groupElements]) => {
      groups[groupName] = _reduceRightInstanceProperty(groupElements).call(groupElements, accumulateElement, null);
    });
    return typeof element === 'function' ? element(groups) : /*#__PURE__*/React.cloneElement(element, groups);
  }

  return typeof element === 'function' ? element(children) : /*#__PURE__*/React.cloneElement(element, {
    children
  });
}

function ElementsRenderer({
  elements
}) {
  return _reduceRightInstanceProperty(elements).call(elements, accumulateElement, null);
}

ElementsRenderer.propTypes = propTypes;
export default ElementsRenderer;