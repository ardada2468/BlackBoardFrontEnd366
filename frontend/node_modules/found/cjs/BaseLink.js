"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _warning = _interopRequireDefault(require("warning"));

var _PropTypes = require("./PropTypes");

const propTypes = {
  as: _propTypes.default.elementType.isRequired,
  to: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]).isRequired,
  match: _propTypes.default.object.isRequired,
  activeClassName: _propTypes.default.string,
  activeStyle: _propTypes.default.object,
  activePropName: _propTypes.default.string,
  router: _PropTypes.routerShape.isRequired,
  exact: _propTypes.default.bool.isRequired,
  target: _propTypes.default.string,
  onClick: _propTypes.default.func,
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func])
};
const defaultProps = {
  as: 'a',
  exact: false
};

class BaseLink extends _react.default.Component {
  constructor(...args) {
    super(...args);

    this.onClick = event => {
      const {
        onClick,
        target,
        router,
        to
      } = this.props;

      if (onClick) {
        onClick(event);
      } // Don't do anything if the user's onClick handler prevented default.
      // Otherwise, let the browser handle the link with the computed href if the
      // event wasn't an unmodified left click, or if the link has a target other
      // than _self.


      if (event.defaultPrevented || event.metaKey || event.altKey || event.ctrlKey || event.shiftKey || event.button !== 0 || target && target !== '_self') {
        return;
      }

      event.preventDefault(); // FIXME: When clicking on a link to the same location in the browser, the
      // actual becomes a replace rather than a push. We may want the same
      // handling â€“ perhaps implemented in the Farce protocol.

      router.push(to);
    };
  }

  render() {
    const _this$props = this.props,
          {
      as: Component,
      to,
      match,
      activeClassName,
      activeStyle,
      activePropName,
      router,
      exact
    } = _this$props,
          props = (0, _objectWithoutPropertiesLoose2.default)(_this$props, ["as", "to", "match", "activeClassName", "activeStyle", "activePropName", "router", "exact"]);

    if (process.env.NODE_ENV !== "production" && typeof Component !== 'function') {
      for (const wrongPropName of ['component', 'Component']) {
        const wrongPropValue = props[wrongPropName];

        if (!wrongPropValue) {
          continue;
        }

        process.env.NODE_ENV !== "production" ? (0, _warning.default)(false, 'Link to %s with `%s` prop `%s` has an element type that is not a component. The expected prop for the link component is `as`.', JSON.stringify(to), wrongPropName, wrongPropValue.displayName || wrongPropValue.name || 'UNKNOWN') : void 0;
      }
    }

    const href = router.createHref(to);
    const childrenIsFunction = typeof props.children === 'function';

    if (childrenIsFunction || activeClassName || activeStyle || activePropName) {
      const toLocation = router.createLocation(to);
      const active = router.isActive(match, toLocation, {
        exact
      });

      if (childrenIsFunction) {
        return props.children({
          href,
          active,
          onClick: this.onClick
        });
      }

      if (active) {
        if (activeClassName) {
          props.className = props.className ? `${props.className} ${activeClassName}` : activeClassName;
        }

        if (activeStyle) {
          props.style = Object.assign({}, props.style, activeStyle);
        }
      }

      if (activePropName) {
        props[activePropName] = active;
      }
    }

    return /*#__PURE__*/_react.default.createElement(Component, (0, _extends2.default)({}, props, {
      href: href,
      onClick: this.onClick // This overrides props.onClick.

    }));
  }

}

BaseLink.propTypes = propTypes;
BaseLink.defaultProps = defaultProps;
var _default = BaseLink;
exports.default = _default;
module.exports = exports.default;