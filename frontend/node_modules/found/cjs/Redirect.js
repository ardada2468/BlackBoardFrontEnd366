"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _RedirectException = _interopRequireDefault(require("./RedirectException"));

class Redirect {
  constructor({
    from,
    to,
    status
  }) {
    this.path = from;
    this.to = to;
    this.status = status;
  }

  render({
    match
  }) {
    const {
      to,
      status
    } = this;
    let toLocation;

    if (typeof to === 'function') {
      toLocation = to(match);
    } else {
      const {
        router,
        params
      } = match;
      toLocation = router.matcher.format(to, params);
    }

    throw new _RedirectException.default(toLocation, status);
  }

}

exports.default = Redirect;

if (process.env.NODE_ENV !== "production") {
  // Workaround to make React Proxy give me the original class, to allow
  // makeRouteConfig to get the actual class, when using JSX for routes.
  Redirect.prototype.isReactComponent = {};
}

module.exports = exports.default;