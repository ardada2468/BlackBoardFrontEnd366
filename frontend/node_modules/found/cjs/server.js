"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.RouterProvider = RouterProvider;
exports.getFarceResult = getFarceResult;

var _Actions = _interopRequireDefault(require("farce/Actions"));

var _ServerProtocol = _interopRequireDefault(require("farce/ServerProtocol"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _PropTypes = require("./PropTypes");

var _RouterContext = _interopRequireDefault(require("./RouterContext"));

var _createFarceStore = _interopRequireDefault(require("./createFarceStore"));

var _createRender = _interopRequireDefault(require("./createRender"));

var _getStoreRenderArgs = _interopRequireDefault(require("./getStoreRenderArgs"));

var _resolver = _interopRequireDefault(require("./resolver"));

const propTypes = {
  renderArgs: _propTypes.default.shape({
    router: _PropTypes.routerShape.isRequired
  }).isRequired,
  children: _propTypes.default.node
};

function RouterProvider({
  renderArgs,
  children
}) {
  return /*#__PURE__*/_react.default.createElement(_RouterContext.default.Provider, {
    value: {
      router: renderArgs.router,
      match: renderArgs
    }
  }, children);
}

RouterProvider.propTypes = propTypes;

async function getFarceResult({
  url,
  historyMiddlewares,
  historyOptions,
  routeConfig,
  matchContext,
  resolver = _resolver.default,
  renderPending,
  renderReady,
  renderError,
  render = (0, _createRender.default)({
    renderPending,
    renderReady,
    renderError
  })
}) {
  const store = (0, _createFarceStore.default)({
    historyProtocol: new _ServerProtocol.default(url),
    historyMiddlewares,
    historyOptions,
    routeConfig
  });
  let renderArgs;

  try {
    renderArgs = await (0, _getStoreRenderArgs.default)({
      store,
      matchContext,
      resolver
    });
  } catch (e) {
    if (e.isFoundRedirectException) {
      // The store is not exposed to the user, so we need to build the redirect
      // URL here.
      return {
        status: e.status,
        redirect: {
          url: store.farce.createHref(e.location)
        }
      };
    }
    /* istanbul ignore next: paranoid guard */


    throw e;
  } finally {
    // This is a no-op with ServerProtocol, but it doesn't hurt.
    store.dispatch(_Actions.default.dispose());
  }

  return {
    status: renderArgs.error ? renderArgs.error.status : 200,
    element: /*#__PURE__*/_react.default.createElement(RouterProvider, {
      renderArgs: renderArgs
    }, render(renderArgs))
  };
}