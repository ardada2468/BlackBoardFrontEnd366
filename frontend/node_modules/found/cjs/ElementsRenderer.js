"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _reduceRight = _interopRequireDefault(require("core-js-pure/stable/instance/reduce-right.js"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

const propTypes = {
  elements: _propTypes.default.arrayOf(_propTypes.default.oneOfType([// This should be an object of this same type, but recursive checks would
  // probably be too messy.
  _propTypes.default.object, _propTypes.default.element, _propTypes.default.func])).isRequired
};

function accumulateElement(children, element) {
  if (!children) {
    return typeof element === 'function' ? element(null) : element;
  }

  if (!element) {
    return children;
  }

  if (! /*#__PURE__*/_react.default.isValidElement(children)) {
    // Children come from named child routes.
    const groups = {};
    Object.entries(children).forEach(([groupName, groupElements]) => {
      groups[groupName] = (0, _reduceRight.default)(groupElements).call(groupElements, accumulateElement, null);
    });
    return typeof element === 'function' ? element(groups) : /*#__PURE__*/_react.default.cloneElement(element, groups);
  }

  return typeof element === 'function' ? element(children) : /*#__PURE__*/_react.default.cloneElement(element, {
    children
  });
}

function ElementsRenderer({
  elements
}) {
  return (0, _reduceRight.default)(elements).call(elements, accumulateElement, null);
}

ElementsRenderer.propTypes = propTypes;
var _default = ElementsRenderer;
exports.default = _default;
module.exports = exports.default;