'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = parse_stack_trace;
function parse_stack_trace(stack_trace) {
	var lines = stack_trace.split('\n').map(function (line) {
		return line.trim();
	});
	var groups = [];
	var group = void 0;

	for (var _iterator = lines, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		var _ref;

		if (_isArray) {
			if (_i >= _iterator.length) break;
			_ref = _iterator[_i++];
		} else {
			_i = _iterator.next();
			if (_i.done) break;
			_ref = _i.value;
		}

		var line = _ref;

		if (line.indexOf('at') !== 0) {
			line = line.replace(/^Error: /, '');
			line = line.replace(/:$/, '');

			group = { title: line, lines: [] };
			groups.push(group);
		} else {
			line = line.replace(/at /, '');

			var line_parts = line.match(/^(.*) \((.*):(\d+):(\d+)\)$/);

			if (line_parts) {
				var method_path = line_parts[1];
				var file_path = line_parts[2];
				var file_line_number = line_parts[3];

				line = {
					file_path: file_path,
					file_line_number: file_line_number,
					method_path: method_path
				};
			} else {
				var line_parts_fallback = line.match(/^(.*) \((.*)\)$/);

				if (line_parts_fallback) {
					var _method_path = line_parts_fallback[1];
					var _file_path = line_parts_fallback[2];

					if (_file_path === 'native') {
						line = {
							method_path: _method_path
						};
					} else {

						line = {
							file_path: _file_path,
							method_path: _method_path
						};
					}
				} else {
					var line_parts_file_line_column = line.match(/^(.*):(\d+):(\d+)$/);

					if (line_parts_file_line_column) {
						var _file_path2 = line_parts_file_line_column[1];
						var _file_line_number = line_parts_file_line_column[2];

						line = {
							file_path: _file_path2,
							file_line_number: _file_line_number
						};
					}
				}
			}

			if (line.file_path) {
				line.file_name = basename(line.file_path);
				line.file_path = transform_file_path(line.file_path);
			}

			group.lines.push(line);
		}
	}

	return groups;
}

function basename(path) {
	var index = path.lastIndexOf('/');

	if (index >= 0) {
		return path.substring(index + 1);
	}

	index = path.lastIndexOf('\\');
	if (index >= 0) {
		return path.substring(index + 1);
	}

	return path;
}

function transform_file_path(file_path) {
	file_path = file_path.replace(/\\/g, '/');

	// replace "/node_modules/xxx/" with "/[xxx]/",
	// and also substitute project name
	var node_modules = file_path.indexOf('/node_modules/');
	if (node_modules >= 0) {
		var before = file_path.slice(0, node_modules).split('/');
		var rest = file_path.substring(node_modules + '/node_modules/'.length).split('/');
		var node_module = rest.shift();

		file_path = '[' + before[before.length - 1] + ']/[' + node_module + ']/' + rest.join('/');
	}

	return file_path;
}
//# sourceMappingURL=parse.js.map