'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = render;

var _parse = require('./parse.js');

var _parse2 = _interopRequireDefault(_parse);

var _helpers = require('./helpers.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function render(error) {
	var groups = (0, _parse2.default)(error.stack);

	var groups_markup = groups.map(function (group, i) {
		var list_item_markup = group.lines.map(function (line) {
			return ' * ' + line_markup(line);
		}).join('\n\n');

		var markup = '\n\t\t\t' + group.title + '\n\t\t\t' + Array(group.title.length + 1).join('=') + '\n\n' + (0, _helpers.tabulate)(list_item_markup, 3) + '\n\t\t';

		return (0, _helpers.tabulate)(markup, -3);
	}).join('');

	return groups_markup.replace(/^\n/, '').replace(/\n$/, '');
}

function line_markup(line_info) {
	if (typeof line_info === 'string') {
		return line_info;
	}

	var line = '';

	if (line_info.file_path) {
		line += '**' + line_info.file_name + '**';
	}

	if (line_info.file_line_number) {
		line += ':' + line_info.file_line_number;
	}

	if (line_info.method_path) {
		if (line.length > 0) {
			line += ' ';
		}

		line += '`' + line_info.method_path + '`';
	}

	if (line_info.file_path) {
		line += '\n\n   ' + line_info.file_path;
	}

	return line;
}
//# sourceMappingURL=markdown.js.map