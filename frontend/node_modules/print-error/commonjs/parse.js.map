{"version":3,"sources":["../source/parse.js"],"names":["parse_stack_trace","stack_trace","lines","split","map","line","trim","groups","group","indexOf","replace","title","push","line_parts","match","method_path","file_path","file_line_number","line_parts_fallback","line_parts_file_line_column","file_name","basename","transform_file_path","path","index","lastIndexOf","substring","node_modules","before","slice","rest","length","node_module","shift","join"],"mappings":"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","file":"parse.js","sourcesContent":["export default function parse_stack_trace(stack_trace)\r\n{\r\n\tconst lines = stack_trace.split('\\n').map(line => line.trim())\r\n\tconst groups = []\r\n\tlet group\r\n\r\n\tfor (let line of lines)\r\n\t{\r\n\t\tif (line.indexOf('at') !== 0)\r\n\t\t{\r\n\t\t\tline = line.replace(/^Error: /, '')\r\n\t\t\tline = line.replace(/:$/, '')\r\n\r\n\t\t\tgroup = { title: line, lines: [] }\r\n\t\t\tgroups.push(group)\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tline = line.replace(/at /, '')\r\n\r\n\t\t\tconst line_parts = line.match(/^(.*) \\((.*):(\\d+):(\\d+)\\)$/)\r\n\r\n\t\t\tif (line_parts)\r\n\t\t\t{\r\n\t\t\t\tconst method_path      = line_parts[1]\r\n\t\t\t\tconst file_path        = line_parts[2]\r\n\t\t\t\tconst file_line_number = line_parts[3]\r\n\r\n\t\t\t\tline = \r\n\t\t\t\t{\r\n\t\t\t\t\tfile_path        : file_path,\r\n\t\t\t\t\tfile_line_number : file_line_number,\r\n\t\t\t\t\tmethod_path      : method_path\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tconst line_parts_fallback = line.match(/^(.*) \\((.*)\\)$/)\r\n\r\n\t\t\t\tif (line_parts_fallback)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst method_path = line_parts_fallback[1]\r\n\t\t\t\t\tconst file_path   = line_parts_fallback[2]\r\n\r\n\t\t\t\t\tif (file_path === 'native')\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tline = \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tmethod_path : method_path\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\tline = \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfile_path   : file_path,\r\n\t\t\t\t\t\t\tmethod_path : method_path\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tconst line_parts_file_line_column = line.match(/^(.*):(\\d+):(\\d+)$/)\r\n\r\n\t\t\t\t\tif (line_parts_file_line_column)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst file_path        = line_parts_file_line_column[1]\r\n\t\t\t\t\t\tconst file_line_number = line_parts_file_line_column[2]\r\n\r\n\t\t\t\t\t\tline = \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfile_path        : file_path,\r\n\t\t\t\t\t\t\tfile_line_number : file_line_number\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (line.file_path)\r\n\t\t\t{\r\n\t\t\t\tline.file_name = basename(line.file_path)\r\n\t\t\t\tline.file_path = transform_file_path(line.file_path)\r\n\t\t\t}\r\n\r\n\t\t\tgroup.lines.push(line)\r\n\t\t}\r\n\t}\r\n\r\n\treturn groups\r\n}\r\n\r\nfunction basename(path)\r\n{\r\n\tlet index = path.lastIndexOf('/')\r\n\r\n\tif (index >= 0)\r\n\t{\r\n\t\treturn path.substring(index + 1)\r\n\t}\r\n\r\n\tindex = path.lastIndexOf('\\\\')\r\n\tif (index >= 0)\r\n\t{\r\n\t\treturn path.substring(index + 1)\r\n\t}\r\n\r\n\treturn path\r\n}\r\n\r\nfunction transform_file_path(file_path)\r\n{\r\n\tfile_path = file_path.replace(/\\\\/g, '/')\r\n\r\n\t// replace \"/node_modules/xxx/\" with \"/[xxx]/\",\r\n\t// and also substitute project name\r\n\tconst node_modules = file_path.indexOf('/node_modules/')\r\n\tif (node_modules >= 0)\r\n\t{\r\n\t\tconst before = file_path.slice(0, node_modules).split('/')\r\n\t\tconst rest = file_path.substring(node_modules + '/node_modules/'.length).split('/')\r\n\t\tconst node_module = rest.shift()\r\n\r\n\t\tfile_path = `[${before[before.length - 1]}]/[${node_module}]/${rest.join('/')}`\r\n\t}\r\n\r\n\treturn file_path\r\n}"]}